// Generated by jextract

package oracle.code.onnx.foreign;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class coreml_provider_factory_h {

    coreml_provider_factory_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup();

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int COREML_FLAG_USE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_USE_NONE = 0
     * }
     */
    public static int COREML_FLAG_USE_NONE() {
        return COREML_FLAG_USE_NONE;
    }
    private static final int COREML_FLAG_USE_CPU_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_USE_CPU_ONLY = 1
     * }
     */
    public static int COREML_FLAG_USE_CPU_ONLY() {
        return COREML_FLAG_USE_CPU_ONLY;
    }
    private static final int COREML_FLAG_ENABLE_ON_SUBGRAPH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_ENABLE_ON_SUBGRAPH = 2
     * }
     */
    public static int COREML_FLAG_ENABLE_ON_SUBGRAPH() {
        return COREML_FLAG_ENABLE_ON_SUBGRAPH;
    }
    private static final int COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 4
     * }
     */
    public static int COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE() {
        return COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE;
    }
    private static final int COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 8
     * }
     */
    public static int COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES() {
        return COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES;
    }
    private static final int COREML_FLAG_CREATE_MLPROGRAM = (int)16L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_CREATE_MLPROGRAM = 16
     * }
     */
    public static int COREML_FLAG_CREATE_MLPROGRAM() {
        return COREML_FLAG_CREATE_MLPROGRAM;
    }
    private static final int COREML_FLAG_USE_CPU_AND_GPU = (int)32L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_USE_CPU_AND_GPU = 32
     * }
     */
    public static int COREML_FLAG_USE_CPU_AND_GPU() {
        return COREML_FLAG_USE_CPU_AND_GPU;
    }
    private static final int COREML_FLAG_LAST = (int)32L;
    /**
     * {@snippet lang=c :
     * enum COREMLFlags.COREML_FLAG_LAST = 32
     * }
     */
    public static int COREML_FLAG_LAST() {
        return COREML_FLAG_LAST;
    }

    private static class OrtSessionOptionsAppendExecutionProvider_CoreML {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            coreml_provider_factory_h.C_POINTER,
            coreml_provider_factory_h.C_POINTER,
            coreml_provider_factory_h.C_INT
        );

        public static final MemorySegment ADDR = coreml_provider_factory_h.findOrThrow("OrtSessionOptionsAppendExecutionProvider_CoreML");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)
     * }
     */
    public static FunctionDescriptor OrtSessionOptionsAppendExecutionProvider_CoreML$descriptor() {
        return OrtSessionOptionsAppendExecutionProvider_CoreML.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)
     * }
     */
    public static MethodHandle OrtSessionOptionsAppendExecutionProvider_CoreML$handle() {
        return OrtSessionOptionsAppendExecutionProvider_CoreML.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)
     * }
     */
    public static MemorySegment OrtSessionOptionsAppendExecutionProvider_CoreML$address() {
        return OrtSessionOptionsAppendExecutionProvider_CoreML.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)
     * }
     */
    public static MemorySegment OrtSessionOptionsAppendExecutionProvider_CoreML(MemorySegment options, int coreml_flags) {
        var mh$ = OrtSessionOptionsAppendExecutionProvider_CoreML.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OrtSessionOptionsAppendExecutionProvider_CoreML", options, coreml_flags);
            }
            return (MemorySegment)mh$.invokeExact(options, coreml_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

