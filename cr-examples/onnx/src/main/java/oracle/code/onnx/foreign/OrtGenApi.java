// Generated by jextract

package oracle.code.onnx.foreign;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class OrtGenApi {

    OrtGenApi() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __has_safe_buffers = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int USE_CLANG_TYPES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return USE_CLANG_TYPES;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = OrtGenApi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = OrtGenApi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = OrtGenApi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = OrtGenApi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = OrtGenApi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = OrtGenApi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long rsize_t
     * }
     */
    public static final OfLong rsize_t = OrtGenApi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = OrtGenApi.C_INT;
    private static final int OgaElementType_undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_undefined = 0
     * }
     */
    public static int OgaElementType_undefined() {
        return OgaElementType_undefined;
    }
    private static final int OgaElementType_float32 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_float32 = 1
     * }
     */
    public static int OgaElementType_float32() {
        return OgaElementType_float32;
    }
    private static final int OgaElementType_uint8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_uint8 = 2
     * }
     */
    public static int OgaElementType_uint8() {
        return OgaElementType_uint8;
    }
    private static final int OgaElementType_int8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_int8 = 3
     * }
     */
    public static int OgaElementType_int8() {
        return OgaElementType_int8;
    }
    private static final int OgaElementType_uint16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_uint16 = 4
     * }
     */
    public static int OgaElementType_uint16() {
        return OgaElementType_uint16;
    }
    private static final int OgaElementType_int16 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_int16 = 5
     * }
     */
    public static int OgaElementType_int16() {
        return OgaElementType_int16;
    }
    private static final int OgaElementType_int32 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_int32 = 6
     * }
     */
    public static int OgaElementType_int32() {
        return OgaElementType_int32;
    }
    private static final int OgaElementType_int64 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_int64 = 7
     * }
     */
    public static int OgaElementType_int64() {
        return OgaElementType_int64;
    }
    private static final int OgaElementType_string = (int)8L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_string = 8
     * }
     */
    public static int OgaElementType_string() {
        return OgaElementType_string;
    }
    private static final int OgaElementType_bool = (int)9L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_bool = 9
     * }
     */
    public static int OgaElementType_bool() {
        return OgaElementType_bool;
    }
    private static final int OgaElementType_float16 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_float16 = 10
     * }
     */
    public static int OgaElementType_float16() {
        return OgaElementType_float16;
    }
    private static final int OgaElementType_float64 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_float64 = 11
     * }
     */
    public static int OgaElementType_float64() {
        return OgaElementType_float64;
    }
    private static final int OgaElementType_uint32 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_uint32 = 12
     * }
     */
    public static int OgaElementType_uint32() {
        return OgaElementType_uint32;
    }
    private static final int OgaElementType_uint64 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_uint64 = 13
     * }
     */
    public static int OgaElementType_uint64() {
        return OgaElementType_uint64;
    }
    private static final int OgaElementType_complex64 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_complex64 = 14
     * }
     */
    public static int OgaElementType_complex64() {
        return OgaElementType_complex64;
    }
    private static final int OgaElementType_complex128 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_complex128 = 15
     * }
     */
    public static int OgaElementType_complex128() {
        return OgaElementType_complex128;
    }
    private static final int OgaElementType_bfloat16 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum OgaElementType.OgaElementType_bfloat16 = 16
     * }
     */
    public static int OgaElementType_bfloat16() {
        return OgaElementType_bfloat16;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void OgaShutdown()
     * }
     */
    public static class OgaShutdown {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(        );
        private static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaShutdown");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private OgaShutdown(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void OgaShutdown()
         * }
         */
        public static OgaShutdown makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new OgaShutdown(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("OgaShutdown", x0);
                }
                 spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class OgaResultGetError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaResultGetError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *OgaResultGetError(const OgaResult *result)
     * }
     */
    public static FunctionDescriptor OgaResultGetError$descriptor() {
        return OgaResultGetError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *OgaResultGetError(const OgaResult *result)
     * }
     */
    public static MethodHandle OgaResultGetError$handle() {
        return OgaResultGetError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *OgaResultGetError(const OgaResult *result)
     * }
     */
    public static MemorySegment OgaResultGetError$address() {
        return OgaResultGetError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *OgaResultGetError(const OgaResult *result)
     * }
     */
    public static MemorySegment OgaResultGetError(MemorySegment result) {
        var mh$ = OgaResultGetError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaResultGetError", result);
            }
            return (MemorySegment)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSetLogBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_BOOL
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSetLogBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogBool(const char *name, bool value)
     * }
     */
    public static FunctionDescriptor OgaSetLogBool$descriptor() {
        return OgaSetLogBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogBool(const char *name, bool value)
     * }
     */
    public static MethodHandle OgaSetLogBool$handle() {
        return OgaSetLogBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogBool(const char *name, bool value)
     * }
     */
    public static MemorySegment OgaSetLogBool$address() {
        return OgaSetLogBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaSetLogBool(const char *name, bool value)
     * }
     */
    public static MemorySegment OgaSetLogBool(MemorySegment name, boolean value) {
        var mh$ = OgaSetLogBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSetLogBool", name, value);
            }
            return (MemorySegment)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSetLogString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSetLogString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogString(const char *name, const char *value)
     * }
     */
    public static FunctionDescriptor OgaSetLogString$descriptor() {
        return OgaSetLogString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogString(const char *name, const char *value)
     * }
     */
    public static MethodHandle OgaSetLogString$handle() {
        return OgaSetLogString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaSetLogString(const char *name, const char *value)
     * }
     */
    public static MemorySegment OgaSetLogString$address() {
        return OgaSetLogString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaSetLogString(const char *name, const char *value)
     * }
     */
    public static MemorySegment OgaSetLogString(MemorySegment name, MemorySegment value) {
        var mh$ = OgaSetLogString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSetLogString", name, value);
            }
            return (MemorySegment)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyResult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyResult(OgaResult *result)
     * }
     */
    public static FunctionDescriptor OgaDestroyResult$descriptor() {
        return OgaDestroyResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyResult(OgaResult *result)
     * }
     */
    public static MethodHandle OgaDestroyResult$handle() {
        return OgaDestroyResult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyResult(OgaResult *result)
     * }
     */
    public static MemorySegment OgaDestroyResult$address() {
        return OgaDestroyResult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyResult(OgaResult *result)
     * }
     */
    public static void OgaDestroyResult(MemorySegment result) {
        var mh$ = OgaDestroyResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyResult", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyString(const char *)
     * }
     */
    public static FunctionDescriptor OgaDestroyString$descriptor() {
        return OgaDestroyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyString(const char *)
     * }
     */
    public static MethodHandle OgaDestroyString$handle() {
        return OgaDestroyString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyString(const char *)
     * }
     */
    public static MemorySegment OgaDestroyString$address() {
        return OgaDestroyString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyString(const char *)
     * }
     */
    public static void OgaDestroyString(MemorySegment x0) {
        var mh$ = OgaDestroyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyString", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyNamedTensors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyNamedTensors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyNamedTensors(OgaNamedTensors *)
     * }
     */
    public static FunctionDescriptor OgaDestroyNamedTensors$descriptor() {
        return OgaDestroyNamedTensors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyNamedTensors(OgaNamedTensors *)
     * }
     */
    public static MethodHandle OgaDestroyNamedTensors$handle() {
        return OgaDestroyNamedTensors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyNamedTensors(OgaNamedTensors *)
     * }
     */
    public static MemorySegment OgaDestroyNamedTensors$address() {
        return OgaDestroyNamedTensors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyNamedTensors(OgaNamedTensors *)
     * }
     */
    public static void OgaDestroyNamedTensors(MemorySegment x0) {
        var mh$ = OgaDestroyNamedTensors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyNamedTensors", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateSequences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateSequences");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateSequences(OgaSequences **out)
     * }
     */
    public static FunctionDescriptor OgaCreateSequences$descriptor() {
        return OgaCreateSequences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateSequences(OgaSequences **out)
     * }
     */
    public static MethodHandle OgaCreateSequences$handle() {
        return OgaCreateSequences.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateSequences(OgaSequences **out)
     * }
     */
    public static MemorySegment OgaCreateSequences$address() {
        return OgaCreateSequences.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateSequences(OgaSequences **out)
     * }
     */
    public static MemorySegment OgaCreateSequences(MemorySegment out) {
        var mh$ = OgaCreateSequences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateSequences", out);
            }
            return (MemorySegment)mh$.invokeExact(out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroySequences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroySequences");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroySequences(OgaSequences *sequences)
     * }
     */
    public static FunctionDescriptor OgaDestroySequences$descriptor() {
        return OgaDestroySequences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroySequences(OgaSequences *sequences)
     * }
     */
    public static MethodHandle OgaDestroySequences$handle() {
        return OgaDestroySequences.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroySequences(OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaDestroySequences$address() {
        return OgaDestroySequences.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroySequences(OgaSequences *sequences)
     * }
     */
    public static void OgaDestroySequences(MemorySegment sequences) {
        var mh$ = OgaDestroySequences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroySequences", sequences);
            }
            mh$.invokeExact(sequences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSequencesCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSequencesCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t OgaSequencesCount(const OgaSequences *sequences)
     * }
     */
    public static FunctionDescriptor OgaSequencesCount$descriptor() {
        return OgaSequencesCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t OgaSequencesCount(const OgaSequences *sequences)
     * }
     */
    public static MethodHandle OgaSequencesCount$handle() {
        return OgaSequencesCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t OgaSequencesCount(const OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaSequencesCount$address() {
        return OgaSequencesCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t OgaSequencesCount(const OgaSequences *sequences)
     * }
     */
    public static long OgaSequencesCount(MemorySegment sequences) {
        var mh$ = OgaSequencesCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSequencesCount", sequences);
            }
            return (long)mh$.invokeExact(sequences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaAppendTokenSequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaAppendTokenSequence");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenSequence(const int32_t *token_ptr, size_t token_cnt, OgaSequences *sequences)
     * }
     */
    public static FunctionDescriptor OgaAppendTokenSequence$descriptor() {
        return OgaAppendTokenSequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenSequence(const int32_t *token_ptr, size_t token_cnt, OgaSequences *sequences)
     * }
     */
    public static MethodHandle OgaAppendTokenSequence$handle() {
        return OgaAppendTokenSequence.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenSequence(const int32_t *token_ptr, size_t token_cnt, OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaAppendTokenSequence$address() {
        return OgaAppendTokenSequence.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenSequence(const int32_t *token_ptr, size_t token_cnt, OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaAppendTokenSequence(MemorySegment token_ptr, long token_cnt, MemorySegment sequences) {
        var mh$ = OgaAppendTokenSequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaAppendTokenSequence", token_ptr, token_cnt, sequences);
            }
            return (MemorySegment)mh$.invokeExact(token_ptr, token_cnt, sequences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaAppendTokenToSequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_INT,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaAppendTokenToSequence");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenToSequence(int32_t token, OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static FunctionDescriptor OgaAppendTokenToSequence$descriptor() {
        return OgaAppendTokenToSequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenToSequence(int32_t token, OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MethodHandle OgaAppendTokenToSequence$handle() {
        return OgaAppendTokenToSequence.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenToSequence(int32_t token, OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MemorySegment OgaAppendTokenToSequence$address() {
        return OgaAppendTokenToSequence.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaAppendTokenToSequence(int32_t token, OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MemorySegment OgaAppendTokenToSequence(int token, MemorySegment sequences, long sequence_index) {
        var mh$ = OgaAppendTokenToSequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaAppendTokenToSequence", token, sequences, sequence_index);
            }
            return (MemorySegment)mh$.invokeExact(token, sequences, sequence_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSequencesGetSequenceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSequencesGetSequenceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t OgaSequencesGetSequenceCount(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static FunctionDescriptor OgaSequencesGetSequenceCount$descriptor() {
        return OgaSequencesGetSequenceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t OgaSequencesGetSequenceCount(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MethodHandle OgaSequencesGetSequenceCount$handle() {
        return OgaSequencesGetSequenceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t OgaSequencesGetSequenceCount(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MemorySegment OgaSequencesGetSequenceCount$address() {
        return OgaSequencesGetSequenceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t OgaSequencesGetSequenceCount(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static long OgaSequencesGetSequenceCount(MemorySegment sequences, long sequence_index) {
        var mh$ = OgaSequencesGetSequenceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSequencesGetSequenceCount", sequences, sequence_index);
            }
            return (long)mh$.invokeExact(sequences, sequence_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSequencesGetSequenceData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSequencesGetSequenceData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const int32_t *OgaSequencesGetSequenceData(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static FunctionDescriptor OgaSequencesGetSequenceData$descriptor() {
        return OgaSequencesGetSequenceData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const int32_t *OgaSequencesGetSequenceData(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MethodHandle OgaSequencesGetSequenceData$handle() {
        return OgaSequencesGetSequenceData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const int32_t *OgaSequencesGetSequenceData(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MemorySegment OgaSequencesGetSequenceData$address() {
        return OgaSequencesGetSequenceData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const int32_t *OgaSequencesGetSequenceData(const OgaSequences *sequences, size_t sequence_index)
     * }
     */
    public static MemorySegment OgaSequencesGetSequenceData(MemorySegment sequences, long sequence_index) {
        var mh$ = OgaSequencesGetSequenceData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSequencesGetSequenceData", sequences, sequence_index);
            }
            return (MemorySegment)mh$.invokeExact(sequences, sequence_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImage(const char *image_path, OgaImages **images)
     * }
     */
    public static FunctionDescriptor OgaLoadImage$descriptor() {
        return OgaLoadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImage(const char *image_path, OgaImages **images)
     * }
     */
    public static MethodHandle OgaLoadImage$handle() {
        return OgaLoadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImage(const char *image_path, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImage$address() {
        return OgaLoadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadImage(const char *image_path, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImage(MemorySegment image_path, MemorySegment images) {
        var mh$ = OgaLoadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadImage", image_path, images);
            }
            return (MemorySegment)mh$.invokeExact(image_path, images);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImages(const OgaStringArray *image_paths, OgaImages **images)
     * }
     */
    public static FunctionDescriptor OgaLoadImages$descriptor() {
        return OgaLoadImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImages(const OgaStringArray *image_paths, OgaImages **images)
     * }
     */
    public static MethodHandle OgaLoadImages$handle() {
        return OgaLoadImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImages(const OgaStringArray *image_paths, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImages$address() {
        return OgaLoadImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadImages(const OgaStringArray *image_paths, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImages(MemorySegment image_paths, MemorySegment images) {
        var mh$ = OgaLoadImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadImages", image_paths, images);
            }
            return (MemorySegment)mh$.invokeExact(image_paths, images);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadImagesFromBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadImagesFromBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImagesFromBuffers(const void **image_data, const size_t *image_data_sizes, size_t count, OgaImages **images)
     * }
     */
    public static FunctionDescriptor OgaLoadImagesFromBuffers$descriptor() {
        return OgaLoadImagesFromBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImagesFromBuffers(const void **image_data, const size_t *image_data_sizes, size_t count, OgaImages **images)
     * }
     */
    public static MethodHandle OgaLoadImagesFromBuffers$handle() {
        return OgaLoadImagesFromBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadImagesFromBuffers(const void **image_data, const size_t *image_data_sizes, size_t count, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImagesFromBuffers$address() {
        return OgaLoadImagesFromBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadImagesFromBuffers(const void **image_data, const size_t *image_data_sizes, size_t count, OgaImages **images)
     * }
     */
    public static MemorySegment OgaLoadImagesFromBuffers(MemorySegment image_data, MemorySegment image_data_sizes, long count, MemorySegment images) {
        var mh$ = OgaLoadImagesFromBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadImagesFromBuffers", image_data, image_data_sizes, count, images);
            }
            return (MemorySegment)mh$.invokeExact(image_data, image_data_sizes, count, images);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyImages(OgaImages *images)
     * }
     */
    public static FunctionDescriptor OgaDestroyImages$descriptor() {
        return OgaDestroyImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyImages(OgaImages *images)
     * }
     */
    public static MethodHandle OgaDestroyImages$handle() {
        return OgaDestroyImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyImages(OgaImages *images)
     * }
     */
    public static MemorySegment OgaDestroyImages$address() {
        return OgaDestroyImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyImages(OgaImages *images)
     * }
     */
    public static void OgaDestroyImages(MemorySegment images) {
        var mh$ = OgaDestroyImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyImages", images);
            }
            mh$.invokeExact(images);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadAudio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadAudio");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudio(const char *audio_path, OgaAudios **audios)
     * }
     */
    public static FunctionDescriptor OgaLoadAudio$descriptor() {
        return OgaLoadAudio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudio(const char *audio_path, OgaAudios **audios)
     * }
     */
    public static MethodHandle OgaLoadAudio$handle() {
        return OgaLoadAudio.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudio(const char *audio_path, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudio$address() {
        return OgaLoadAudio.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudio(const char *audio_path, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudio(MemorySegment audio_path, MemorySegment audios) {
        var mh$ = OgaLoadAudio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadAudio", audio_path, audios);
            }
            return (MemorySegment)mh$.invokeExact(audio_path, audios);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadAudios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadAudios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudios(const OgaStringArray *audio_paths, OgaAudios **audios)
     * }
     */
    public static FunctionDescriptor OgaLoadAudios$descriptor() {
        return OgaLoadAudios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudios(const OgaStringArray *audio_paths, OgaAudios **audios)
     * }
     */
    public static MethodHandle OgaLoadAudios$handle() {
        return OgaLoadAudios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudios(const OgaStringArray *audio_paths, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudios$address() {
        return OgaLoadAudios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudios(const OgaStringArray *audio_paths, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudios(MemorySegment audio_paths, MemorySegment audios) {
        var mh$ = OgaLoadAudios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadAudios", audio_paths, audios);
            }
            return (MemorySegment)mh$.invokeExact(audio_paths, audios);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadAudiosFromBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadAudiosFromBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudiosFromBuffers(const void **audio_data, const size_t *audio_data_sizes, size_t count, OgaAudios **audios)
     * }
     */
    public static FunctionDescriptor OgaLoadAudiosFromBuffers$descriptor() {
        return OgaLoadAudiosFromBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudiosFromBuffers(const void **audio_data, const size_t *audio_data_sizes, size_t count, OgaAudios **audios)
     * }
     */
    public static MethodHandle OgaLoadAudiosFromBuffers$handle() {
        return OgaLoadAudiosFromBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudiosFromBuffers(const void **audio_data, const size_t *audio_data_sizes, size_t count, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudiosFromBuffers$address() {
        return OgaLoadAudiosFromBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadAudiosFromBuffers(const void **audio_data, const size_t *audio_data_sizes, size_t count, OgaAudios **audios)
     * }
     */
    public static MemorySegment OgaLoadAudiosFromBuffers(MemorySegment audio_data, MemorySegment audio_data_sizes, long count, MemorySegment audios) {
        var mh$ = OgaLoadAudiosFromBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadAudiosFromBuffers", audio_data, audio_data_sizes, count, audios);
            }
            return (MemorySegment)mh$.invokeExact(audio_data, audio_data_sizes, count, audios);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyAudios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyAudios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyAudios(OgaAudios *audios)
     * }
     */
    public static FunctionDescriptor OgaDestroyAudios$descriptor() {
        return OgaDestroyAudios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyAudios(OgaAudios *audios)
     * }
     */
    public static MethodHandle OgaDestroyAudios$handle() {
        return OgaDestroyAudios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyAudios(OgaAudios *audios)
     * }
     */
    public static MemorySegment OgaDestroyAudios$address() {
        return OgaDestroyAudios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyAudios(OgaAudios *audios)
     * }
     */
    public static void OgaDestroyAudios(MemorySegment audios) {
        var mh$ = OgaDestroyAudios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyAudios", audios);
            }
            mh$.invokeExact(audios);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateRuntimeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateRuntimeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateRuntimeSettings(OgaRuntimeSettings **out)
     * }
     */
    public static FunctionDescriptor OgaCreateRuntimeSettings$descriptor() {
        return OgaCreateRuntimeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateRuntimeSettings(OgaRuntimeSettings **out)
     * }
     */
    public static MethodHandle OgaCreateRuntimeSettings$handle() {
        return OgaCreateRuntimeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateRuntimeSettings(OgaRuntimeSettings **out)
     * }
     */
    public static MemorySegment OgaCreateRuntimeSettings$address() {
        return OgaCreateRuntimeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateRuntimeSettings(OgaRuntimeSettings **out)
     * }
     */
    public static MemorySegment OgaCreateRuntimeSettings(MemorySegment out) {
        var mh$ = OgaCreateRuntimeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateRuntimeSettings", out);
            }
            return (MemorySegment)mh$.invokeExact(out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyRuntimeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyRuntimeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyRuntimeSettings(OgaRuntimeSettings *settings)
     * }
     */
    public static FunctionDescriptor OgaDestroyRuntimeSettings$descriptor() {
        return OgaDestroyRuntimeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyRuntimeSettings(OgaRuntimeSettings *settings)
     * }
     */
    public static MethodHandle OgaDestroyRuntimeSettings$handle() {
        return OgaDestroyRuntimeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyRuntimeSettings(OgaRuntimeSettings *settings)
     * }
     */
    public static MemorySegment OgaDestroyRuntimeSettings$address() {
        return OgaDestroyRuntimeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyRuntimeSettings(OgaRuntimeSettings *settings)
     * }
     */
    public static void OgaDestroyRuntimeSettings(MemorySegment settings) {
        var mh$ = OgaDestroyRuntimeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyRuntimeSettings", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaRuntimeSettingsSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaRuntimeSettingsSetHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaRuntimeSettingsSetHandle(OgaRuntimeSettings *settings, const char *handle_name, void *handle)
     * }
     */
    public static FunctionDescriptor OgaRuntimeSettingsSetHandle$descriptor() {
        return OgaRuntimeSettingsSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaRuntimeSettingsSetHandle(OgaRuntimeSettings *settings, const char *handle_name, void *handle)
     * }
     */
    public static MethodHandle OgaRuntimeSettingsSetHandle$handle() {
        return OgaRuntimeSettingsSetHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaRuntimeSettingsSetHandle(OgaRuntimeSettings *settings, const char *handle_name, void *handle)
     * }
     */
    public static MemorySegment OgaRuntimeSettingsSetHandle$address() {
        return OgaRuntimeSettingsSetHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaRuntimeSettingsSetHandle(OgaRuntimeSettings *settings, const char *handle_name, void *handle)
     * }
     */
    public static MemorySegment OgaRuntimeSettingsSetHandle(MemorySegment settings, MemorySegment handle_name, MemorySegment handle) {
        var mh$ = OgaRuntimeSettingsSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaRuntimeSettingsSetHandle", settings, handle_name, handle);
            }
            return (MemorySegment)mh$.invokeExact(settings, handle_name, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateConfig(const char *config_path, OgaConfig **out)
     * }
     */
    public static FunctionDescriptor OgaCreateConfig$descriptor() {
        return OgaCreateConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateConfig(const char *config_path, OgaConfig **out)
     * }
     */
    public static MethodHandle OgaCreateConfig$handle() {
        return OgaCreateConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateConfig(const char *config_path, OgaConfig **out)
     * }
     */
    public static MemorySegment OgaCreateConfig$address() {
        return OgaCreateConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateConfig(const char *config_path, OgaConfig **out)
     * }
     */
    public static MemorySegment OgaCreateConfig(MemorySegment config_path, MemorySegment out) {
        var mh$ = OgaCreateConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateConfig", config_path, out);
            }
            return (MemorySegment)mh$.invokeExact(config_path, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaConfigClearProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaConfigClearProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigClearProviders(OgaConfig *config)
     * }
     */
    public static FunctionDescriptor OgaConfigClearProviders$descriptor() {
        return OgaConfigClearProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigClearProviders(OgaConfig *config)
     * }
     */
    public static MethodHandle OgaConfigClearProviders$handle() {
        return OgaConfigClearProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigClearProviders(OgaConfig *config)
     * }
     */
    public static MemorySegment OgaConfigClearProviders$address() {
        return OgaConfigClearProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaConfigClearProviders(OgaConfig *config)
     * }
     */
    public static MemorySegment OgaConfigClearProviders(MemorySegment config) {
        var mh$ = OgaConfigClearProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaConfigClearProviders", config);
            }
            return (MemorySegment)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaConfigAppendProvider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaConfigAppendProvider");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigAppendProvider(OgaConfig *config, const char *provider)
     * }
     */
    public static FunctionDescriptor OgaConfigAppendProvider$descriptor() {
        return OgaConfigAppendProvider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigAppendProvider(OgaConfig *config, const char *provider)
     * }
     */
    public static MethodHandle OgaConfigAppendProvider$handle() {
        return OgaConfigAppendProvider.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigAppendProvider(OgaConfig *config, const char *provider)
     * }
     */
    public static MemorySegment OgaConfigAppendProvider$address() {
        return OgaConfigAppendProvider.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaConfigAppendProvider(OgaConfig *config, const char *provider)
     * }
     */
    public static MemorySegment OgaConfigAppendProvider(MemorySegment config, MemorySegment provider) {
        var mh$ = OgaConfigAppendProvider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaConfigAppendProvider", config, provider);
            }
            return (MemorySegment)mh$.invokeExact(config, provider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaConfigSetProviderOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaConfigSetProviderOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigSetProviderOption(OgaConfig *config, const char *provider, const char *key, const char *value)
     * }
     */
    public static FunctionDescriptor OgaConfigSetProviderOption$descriptor() {
        return OgaConfigSetProviderOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigSetProviderOption(OgaConfig *config, const char *provider, const char *key, const char *value)
     * }
     */
    public static MethodHandle OgaConfigSetProviderOption$handle() {
        return OgaConfigSetProviderOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigSetProviderOption(OgaConfig *config, const char *provider, const char *key, const char *value)
     * }
     */
    public static MemorySegment OgaConfigSetProviderOption$address() {
        return OgaConfigSetProviderOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaConfigSetProviderOption(OgaConfig *config, const char *provider, const char *key, const char *value)
     * }
     */
    public static MemorySegment OgaConfigSetProviderOption(MemorySegment config, MemorySegment provider, MemorySegment key, MemorySegment value) {
        var mh$ = OgaConfigSetProviderOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaConfigSetProviderOption", config, provider, key, value);
            }
            return (MemorySegment)mh$.invokeExact(config, provider, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaConfigOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaConfigOverlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigOverlay(OgaConfig *config, const char *json)
     * }
     */
    public static FunctionDescriptor OgaConfigOverlay$descriptor() {
        return OgaConfigOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigOverlay(OgaConfig *config, const char *json)
     * }
     */
    public static MethodHandle OgaConfigOverlay$handle() {
        return OgaConfigOverlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaConfigOverlay(OgaConfig *config, const char *json)
     * }
     */
    public static MemorySegment OgaConfigOverlay$address() {
        return OgaConfigOverlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaConfigOverlay(OgaConfig *config, const char *json)
     * }
     */
    public static MemorySegment OgaConfigOverlay(MemorySegment config, MemorySegment json) {
        var mh$ = OgaConfigOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaConfigOverlay", config, json);
            }
            return (MemorySegment)mh$.invokeExact(config, json);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModel(const char *config_path, OgaModel **out)
     * }
     */
    public static FunctionDescriptor OgaCreateModel$descriptor() {
        return OgaCreateModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModel(const char *config_path, OgaModel **out)
     * }
     */
    public static MethodHandle OgaCreateModel$handle() {
        return OgaCreateModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModel(const char *config_path, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModel$address() {
        return OgaCreateModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateModel(const char *config_path, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModel(MemorySegment config_path, MemorySegment out) {
        var mh$ = OgaCreateModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateModel", config_path, out);
            }
            return (MemorySegment)mh$.invokeExact(config_path, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateModelFromConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateModelFromConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelFromConfig(const OgaConfig *config, OgaModel **out)
     * }
     */
    public static FunctionDescriptor OgaCreateModelFromConfig$descriptor() {
        return OgaCreateModelFromConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelFromConfig(const OgaConfig *config, OgaModel **out)
     * }
     */
    public static MethodHandle OgaCreateModelFromConfig$handle() {
        return OgaCreateModelFromConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelFromConfig(const OgaConfig *config, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModelFromConfig$address() {
        return OgaCreateModelFromConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelFromConfig(const OgaConfig *config, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModelFromConfig(MemorySegment config, MemorySegment out) {
        var mh$ = OgaCreateModelFromConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateModelFromConfig", config, out);
            }
            return (MemorySegment)mh$.invokeExact(config, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateModelWithRuntimeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateModelWithRuntimeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelWithRuntimeSettings(const char *config_path, const OgaRuntimeSettings *settings, OgaModel **out)
     * }
     */
    public static FunctionDescriptor OgaCreateModelWithRuntimeSettings$descriptor() {
        return OgaCreateModelWithRuntimeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelWithRuntimeSettings(const char *config_path, const OgaRuntimeSettings *settings, OgaModel **out)
     * }
     */
    public static MethodHandle OgaCreateModelWithRuntimeSettings$handle() {
        return OgaCreateModelWithRuntimeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelWithRuntimeSettings(const char *config_path, const OgaRuntimeSettings *settings, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModelWithRuntimeSettings$address() {
        return OgaCreateModelWithRuntimeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateModelWithRuntimeSettings(const char *config_path, const OgaRuntimeSettings *settings, OgaModel **out)
     * }
     */
    public static MemorySegment OgaCreateModelWithRuntimeSettings(MemorySegment config_path, MemorySegment settings, MemorySegment out) {
        var mh$ = OgaCreateModelWithRuntimeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateModelWithRuntimeSettings", config_path, settings, out);
            }
            return (MemorySegment)mh$.invokeExact(config_path, settings, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaModelGetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaModelGetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetType(const OgaModel *model, const char **out)
     * }
     */
    public static FunctionDescriptor OgaModelGetType$descriptor() {
        return OgaModelGetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetType(const OgaModel *model, const char **out)
     * }
     */
    public static MethodHandle OgaModelGetType$handle() {
        return OgaModelGetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetType(const OgaModel *model, const char **out)
     * }
     */
    public static MemorySegment OgaModelGetType$address() {
        return OgaModelGetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaModelGetType(const OgaModel *model, const char **out)
     * }
     */
    public static MemorySegment OgaModelGetType(MemorySegment model, MemorySegment out) {
        var mh$ = OgaModelGetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaModelGetType", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaModelGetDeviceType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaModelGetDeviceType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetDeviceType(const OgaModel *model, const char **out)
     * }
     */
    public static FunctionDescriptor OgaModelGetDeviceType$descriptor() {
        return OgaModelGetDeviceType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetDeviceType(const OgaModel *model, const char **out)
     * }
     */
    public static MethodHandle OgaModelGetDeviceType$handle() {
        return OgaModelGetDeviceType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaModelGetDeviceType(const OgaModel *model, const char **out)
     * }
     */
    public static MemorySegment OgaModelGetDeviceType$address() {
        return OgaModelGetDeviceType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaModelGetDeviceType(const OgaModel *model, const char **out)
     * }
     */
    public static MemorySegment OgaModelGetDeviceType(MemorySegment model, MemorySegment out) {
        var mh$ = OgaModelGetDeviceType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaModelGetDeviceType", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyConfig(OgaConfig *config)
     * }
     */
    public static FunctionDescriptor OgaDestroyConfig$descriptor() {
        return OgaDestroyConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyConfig(OgaConfig *config)
     * }
     */
    public static MethodHandle OgaDestroyConfig$handle() {
        return OgaDestroyConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyConfig(OgaConfig *config)
     * }
     */
    public static MemorySegment OgaDestroyConfig$address() {
        return OgaDestroyConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyConfig(OgaConfig *config)
     * }
     */
    public static void OgaDestroyConfig(MemorySegment config) {
        var mh$ = OgaDestroyConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyConfig", config);
            }
            mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyModel(OgaModel *model)
     * }
     */
    public static FunctionDescriptor OgaDestroyModel$descriptor() {
        return OgaDestroyModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyModel(OgaModel *model)
     * }
     */
    public static MethodHandle OgaDestroyModel$handle() {
        return OgaDestroyModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyModel(OgaModel *model)
     * }
     */
    public static MemorySegment OgaDestroyModel$address() {
        return OgaDestroyModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyModel(OgaModel *model)
     * }
     */
    public static void OgaDestroyModel(MemorySegment model) {
        var mh$ = OgaDestroyModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyModel", model);
            }
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateGeneratorParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateGeneratorParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGeneratorParams(const OgaModel *model, OgaGeneratorParams **out)
     * }
     */
    public static FunctionDescriptor OgaCreateGeneratorParams$descriptor() {
        return OgaCreateGeneratorParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGeneratorParams(const OgaModel *model, OgaGeneratorParams **out)
     * }
     */
    public static MethodHandle OgaCreateGeneratorParams$handle() {
        return OgaCreateGeneratorParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGeneratorParams(const OgaModel *model, OgaGeneratorParams **out)
     * }
     */
    public static MemorySegment OgaCreateGeneratorParams$address() {
        return OgaCreateGeneratorParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateGeneratorParams(const OgaModel *model, OgaGeneratorParams **out)
     * }
     */
    public static MemorySegment OgaCreateGeneratorParams(MemorySegment model, MemorySegment out) {
        var mh$ = OgaCreateGeneratorParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateGeneratorParams", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyGeneratorParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyGeneratorParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyGeneratorParams(OgaGeneratorParams *generator_params)
     * }
     */
    public static FunctionDescriptor OgaDestroyGeneratorParams$descriptor() {
        return OgaDestroyGeneratorParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyGeneratorParams(OgaGeneratorParams *generator_params)
     * }
     */
    public static MethodHandle OgaDestroyGeneratorParams$handle() {
        return OgaDestroyGeneratorParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyGeneratorParams(OgaGeneratorParams *generator_params)
     * }
     */
    public static MemorySegment OgaDestroyGeneratorParams$address() {
        return OgaDestroyGeneratorParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyGeneratorParams(OgaGeneratorParams *generator_params)
     * }
     */
    public static void OgaDestroyGeneratorParams(MemorySegment generator_params) {
        var mh$ = OgaDestroyGeneratorParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyGeneratorParams", generator_params);
            }
            mh$.invokeExact(generator_params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetSearchNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_DOUBLE
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetSearchNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchNumber(OgaGeneratorParams *generator_params, const char *name, double value)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetSearchNumber$descriptor() {
        return OgaGeneratorParamsSetSearchNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchNumber(OgaGeneratorParams *generator_params, const char *name, double value)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetSearchNumber$handle() {
        return OgaGeneratorParamsSetSearchNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchNumber(OgaGeneratorParams *generator_params, const char *name, double value)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetSearchNumber$address() {
        return OgaGeneratorParamsSetSearchNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchNumber(OgaGeneratorParams *generator_params, const char *name, double value)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetSearchNumber(MemorySegment generator_params, MemorySegment name, double value) {
        var mh$ = OgaGeneratorParamsSetSearchNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetSearchNumber", generator_params, name, value);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetSearchBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_BOOL
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetSearchBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchBool(OgaGeneratorParams *generator_params, const char *name, bool value)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetSearchBool$descriptor() {
        return OgaGeneratorParamsSetSearchBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchBool(OgaGeneratorParams *generator_params, const char *name, bool value)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetSearchBool$handle() {
        return OgaGeneratorParamsSetSearchBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchBool(OgaGeneratorParams *generator_params, const char *name, bool value)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetSearchBool$address() {
        return OgaGeneratorParamsSetSearchBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetSearchBool(OgaGeneratorParams *generator_params, const char *name, bool value)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetSearchBool(MemorySegment generator_params, MemorySegment name, boolean value) {
        var mh$ = OgaGeneratorParamsSetSearchBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetSearchBool", generator_params, name, value);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_INT
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(OgaGeneratorParams *generator_params, int32_t max_batch_size)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize$descriptor() {
        return OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(OgaGeneratorParams *generator_params, int32_t max_batch_size)
     * }
     */
    public static MethodHandle OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize$handle() {
        return OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(OgaGeneratorParams *generator_params, int32_t max_batch_size)
     * }
     */
    public static MemorySegment OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize$address() {
        return OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(OgaGeneratorParams *generator_params, int32_t max_batch_size)
     * }
     */
    public static MemorySegment OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(MemorySegment generator_params, int max_batch_size) {
        var mh$ = OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize", generator_params, max_batch_size);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, max_batch_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetInputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetInputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetInputs(OgaGeneratorParams *generator_params, const OgaNamedTensors *named_tensors)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetInputs$descriptor() {
        return OgaGeneratorParamsSetInputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetInputs(OgaGeneratorParams *generator_params, const OgaNamedTensors *named_tensors)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetInputs$handle() {
        return OgaGeneratorParamsSetInputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetInputs(OgaGeneratorParams *generator_params, const OgaNamedTensors *named_tensors)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetInputs$address() {
        return OgaGeneratorParamsSetInputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetInputs(OgaGeneratorParams *generator_params, const OgaNamedTensors *named_tensors)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetInputs(MemorySegment generator_params, MemorySegment named_tensors) {
        var mh$ = OgaGeneratorParamsSetInputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetInputs", generator_params, named_tensors);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, named_tensors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetModelInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetModelInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetModelInput(OgaGeneratorParams *generator_params, const char *name, OgaTensor *tensor)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetModelInput$descriptor() {
        return OgaGeneratorParamsSetModelInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetModelInput(OgaGeneratorParams *generator_params, const char *name, OgaTensor *tensor)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetModelInput$handle() {
        return OgaGeneratorParamsSetModelInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetModelInput(OgaGeneratorParams *generator_params, const char *name, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetModelInput$address() {
        return OgaGeneratorParamsSetModelInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetModelInput(OgaGeneratorParams *generator_params, const char *name, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetModelInput(MemorySegment generator_params, MemorySegment name, MemorySegment tensor) {
        var mh$ = OgaGeneratorParamsSetModelInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetModelInput", generator_params, name, tensor);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, name, tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetWhisperInputFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetWhisperInputFeatures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetWhisperInputFeatures(OgaGeneratorParams *generator_params, OgaTensor *tensor)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetWhisperInputFeatures$descriptor() {
        return OgaGeneratorParamsSetWhisperInputFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetWhisperInputFeatures(OgaGeneratorParams *generator_params, OgaTensor *tensor)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetWhisperInputFeatures$handle() {
        return OgaGeneratorParamsSetWhisperInputFeatures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetWhisperInputFeatures(OgaGeneratorParams *generator_params, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetWhisperInputFeatures$address() {
        return OgaGeneratorParamsSetWhisperInputFeatures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetWhisperInputFeatures(OgaGeneratorParams *generator_params, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetWhisperInputFeatures(MemorySegment generator_params, MemorySegment tensor) {
        var mh$ = OgaGeneratorParamsSetWhisperInputFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetWhisperInputFeatures", generator_params, tensor);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGeneratorParamsSetGuidance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGeneratorParamsSetGuidance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetGuidance(OgaGeneratorParams *generator_params, const char *type, const char *data)
     * }
     */
    public static FunctionDescriptor OgaGeneratorParamsSetGuidance$descriptor() {
        return OgaGeneratorParamsSetGuidance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetGuidance(OgaGeneratorParams *generator_params, const char *type, const char *data)
     * }
     */
    public static MethodHandle OgaGeneratorParamsSetGuidance$handle() {
        return OgaGeneratorParamsSetGuidance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetGuidance(OgaGeneratorParams *generator_params, const char *type, const char *data)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetGuidance$address() {
        return OgaGeneratorParamsSetGuidance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGeneratorParamsSetGuidance(OgaGeneratorParams *generator_params, const char *type, const char *data)
     * }
     */
    public static MemorySegment OgaGeneratorParamsSetGuidance(MemorySegment generator_params, MemorySegment type, MemorySegment data) {
        var mh$ = OgaGeneratorParamsSetGuidance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGeneratorParamsSetGuidance", generator_params, type, data);
            }
            return (MemorySegment)mh$.invokeExact(generator_params, type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateGenerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateGenerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGenerator(const OgaModel *model, const OgaGeneratorParams *params, OgaGenerator **out)
     * }
     */
    public static FunctionDescriptor OgaCreateGenerator$descriptor() {
        return OgaCreateGenerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGenerator(const OgaModel *model, const OgaGeneratorParams *params, OgaGenerator **out)
     * }
     */
    public static MethodHandle OgaCreateGenerator$handle() {
        return OgaCreateGenerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateGenerator(const OgaModel *model, const OgaGeneratorParams *params, OgaGenerator **out)
     * }
     */
    public static MemorySegment OgaCreateGenerator$address() {
        return OgaCreateGenerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateGenerator(const OgaModel *model, const OgaGeneratorParams *params, OgaGenerator **out)
     * }
     */
    public static MemorySegment OgaCreateGenerator(MemorySegment model, MemorySegment params, MemorySegment out) {
        var mh$ = OgaCreateGenerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateGenerator", model, params, out);
            }
            return (MemorySegment)mh$.invokeExact(model, params, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyGenerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyGenerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyGenerator(OgaGenerator *generator)
     * }
     */
    public static FunctionDescriptor OgaDestroyGenerator$descriptor() {
        return OgaDestroyGenerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyGenerator(OgaGenerator *generator)
     * }
     */
    public static MethodHandle OgaDestroyGenerator$handle() {
        return OgaDestroyGenerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyGenerator(OgaGenerator *generator)
     * }
     */
    public static MemorySegment OgaDestroyGenerator$address() {
        return OgaDestroyGenerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyGenerator(OgaGenerator *generator)
     * }
     */
    public static void OgaDestroyGenerator(MemorySegment generator) {
        var mh$ = OgaDestroyGenerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyGenerator", generator);
            }
            mh$.invokeExact(generator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_IsDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_BOOL,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_IsDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsDone(const OgaGenerator *generator)
     * }
     */
    public static FunctionDescriptor OgaGenerator_IsDone$descriptor() {
        return OgaGenerator_IsDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsDone(const OgaGenerator *generator)
     * }
     */
    public static MethodHandle OgaGenerator_IsDone$handle() {
        return OgaGenerator_IsDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsDone(const OgaGenerator *generator)
     * }
     */
    public static MemorySegment OgaGenerator_IsDone$address() {
        return OgaGenerator_IsDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool OgaGenerator_IsDone(const OgaGenerator *generator)
     * }
     */
    public static boolean OgaGenerator_IsDone(MemorySegment generator) {
        var mh$ = OgaGenerator_IsDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_IsDone", generator);
            }
            return (boolean)mh$.invokeExact(generator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_IsSessionTerminated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_BOOL,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_IsSessionTerminated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsSessionTerminated(const OgaGenerator *generator)
     * }
     */
    public static FunctionDescriptor OgaGenerator_IsSessionTerminated$descriptor() {
        return OgaGenerator_IsSessionTerminated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsSessionTerminated(const OgaGenerator *generator)
     * }
     */
    public static MethodHandle OgaGenerator_IsSessionTerminated$handle() {
        return OgaGenerator_IsSessionTerminated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool OgaGenerator_IsSessionTerminated(const OgaGenerator *generator)
     * }
     */
    public static MemorySegment OgaGenerator_IsSessionTerminated$address() {
        return OgaGenerator_IsSessionTerminated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool OgaGenerator_IsSessionTerminated(const OgaGenerator *generator)
     * }
     */
    public static boolean OgaGenerator_IsSessionTerminated(MemorySegment generator) {
        var mh$ = OgaGenerator_IsSessionTerminated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_IsSessionTerminated", generator);
            }
            return (boolean)mh$.invokeExact(generator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_AppendTokenSequences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_AppendTokenSequences");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokenSequences(OgaGenerator *oga_generator, const OgaSequences *p_sequences)
     * }
     */
    public static FunctionDescriptor OgaGenerator_AppendTokenSequences$descriptor() {
        return OgaGenerator_AppendTokenSequences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokenSequences(OgaGenerator *oga_generator, const OgaSequences *p_sequences)
     * }
     */
    public static MethodHandle OgaGenerator_AppendTokenSequences$handle() {
        return OgaGenerator_AppendTokenSequences.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokenSequences(OgaGenerator *oga_generator, const OgaSequences *p_sequences)
     * }
     */
    public static MemorySegment OgaGenerator_AppendTokenSequences$address() {
        return OgaGenerator_AppendTokenSequences.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokenSequences(OgaGenerator *oga_generator, const OgaSequences *p_sequences)
     * }
     */
    public static MemorySegment OgaGenerator_AppendTokenSequences(MemorySegment oga_generator, MemorySegment p_sequences) {
        var mh$ = OgaGenerator_AppendTokenSequences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_AppendTokenSequences", oga_generator, p_sequences);
            }
            return (MemorySegment)mh$.invokeExact(oga_generator, p_sequences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_AppendTokens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_AppendTokens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokens(OgaGenerator *oga_generator, const int32_t *input_ids, size_t input_ids_count)
     * }
     */
    public static FunctionDescriptor OgaGenerator_AppendTokens$descriptor() {
        return OgaGenerator_AppendTokens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokens(OgaGenerator *oga_generator, const int32_t *input_ids, size_t input_ids_count)
     * }
     */
    public static MethodHandle OgaGenerator_AppendTokens$handle() {
        return OgaGenerator_AppendTokens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokens(OgaGenerator *oga_generator, const int32_t *input_ids, size_t input_ids_count)
     * }
     */
    public static MemorySegment OgaGenerator_AppendTokens$address() {
        return OgaGenerator_AppendTokens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_AppendTokens(OgaGenerator *oga_generator, const int32_t *input_ids, size_t input_ids_count)
     * }
     */
    public static MemorySegment OgaGenerator_AppendTokens(MemorySegment oga_generator, MemorySegment input_ids, long input_ids_count) {
        var mh$ = OgaGenerator_AppendTokens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_AppendTokens", oga_generator, input_ids, input_ids_count);
            }
            return (MemorySegment)mh$.invokeExact(oga_generator, input_ids, input_ids_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GenerateNextToken {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GenerateNextToken");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GenerateNextToken(OgaGenerator *generator)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GenerateNextToken$descriptor() {
        return OgaGenerator_GenerateNextToken.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GenerateNextToken(OgaGenerator *generator)
     * }
     */
    public static MethodHandle OgaGenerator_GenerateNextToken$handle() {
        return OgaGenerator_GenerateNextToken.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GenerateNextToken(OgaGenerator *generator)
     * }
     */
    public static MemorySegment OgaGenerator_GenerateNextToken$address() {
        return OgaGenerator_GenerateNextToken.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GenerateNextToken(OgaGenerator *generator)
     * }
     */
    public static MemorySegment OgaGenerator_GenerateNextToken(MemorySegment generator) {
        var mh$ = OgaGenerator_GenerateNextToken.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GenerateNextToken", generator);
            }
            return (MemorySegment)mh$.invokeExact(generator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GetNextTokens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GetNextTokens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetNextTokens(const OgaGenerator *generator, const int32_t **out, size_t *out_count)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GetNextTokens$descriptor() {
        return OgaGenerator_GetNextTokens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetNextTokens(const OgaGenerator *generator, const int32_t **out, size_t *out_count)
     * }
     */
    public static MethodHandle OgaGenerator_GetNextTokens$handle() {
        return OgaGenerator_GetNextTokens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetNextTokens(const OgaGenerator *generator, const int32_t **out, size_t *out_count)
     * }
     */
    public static MemorySegment OgaGenerator_GetNextTokens$address() {
        return OgaGenerator_GetNextTokens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetNextTokens(const OgaGenerator *generator, const int32_t **out, size_t *out_count)
     * }
     */
    public static MemorySegment OgaGenerator_GetNextTokens(MemorySegment generator, MemorySegment out, MemorySegment out_count) {
        var mh$ = OgaGenerator_GetNextTokens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GetNextTokens", generator, out, out_count);
            }
            return (MemorySegment)mh$.invokeExact(generator, out, out_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_SetRuntimeOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_SetRuntimeOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetRuntimeOption(OgaGenerator *generator, const char *key, const char *value)
     * }
     */
    public static FunctionDescriptor OgaGenerator_SetRuntimeOption$descriptor() {
        return OgaGenerator_SetRuntimeOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetRuntimeOption(OgaGenerator *generator, const char *key, const char *value)
     * }
     */
    public static MethodHandle OgaGenerator_SetRuntimeOption$handle() {
        return OgaGenerator_SetRuntimeOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetRuntimeOption(OgaGenerator *generator, const char *key, const char *value)
     * }
     */
    public static MemorySegment OgaGenerator_SetRuntimeOption$address() {
        return OgaGenerator_SetRuntimeOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetRuntimeOption(OgaGenerator *generator, const char *key, const char *value)
     * }
     */
    public static MemorySegment OgaGenerator_SetRuntimeOption(MemorySegment generator, MemorySegment key, MemorySegment value) {
        var mh$ = OgaGenerator_SetRuntimeOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_SetRuntimeOption", generator, key, value);
            }
            return (MemorySegment)mh$.invokeExact(generator, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_RewindTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_RewindTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_RewindTo(OgaGenerator *generator, size_t new_length)
     * }
     */
    public static FunctionDescriptor OgaGenerator_RewindTo$descriptor() {
        return OgaGenerator_RewindTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_RewindTo(OgaGenerator *generator, size_t new_length)
     * }
     */
    public static MethodHandle OgaGenerator_RewindTo$handle() {
        return OgaGenerator_RewindTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_RewindTo(OgaGenerator *generator, size_t new_length)
     * }
     */
    public static MemorySegment OgaGenerator_RewindTo$address() {
        return OgaGenerator_RewindTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_RewindTo(OgaGenerator *generator, size_t new_length)
     * }
     */
    public static MemorySegment OgaGenerator_RewindTo(MemorySegment generator, long new_length) {
        var mh$ = OgaGenerator_RewindTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_RewindTo", generator, new_length);
            }
            return (MemorySegment)mh$.invokeExact(generator, new_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GetOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GetOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetOutput(const OgaGenerator *generator, const char *name, OgaTensor **out)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GetOutput$descriptor() {
        return OgaGenerator_GetOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetOutput(const OgaGenerator *generator, const char *name, OgaTensor **out)
     * }
     */
    public static MethodHandle OgaGenerator_GetOutput$handle() {
        return OgaGenerator_GetOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetOutput(const OgaGenerator *generator, const char *name, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaGenerator_GetOutput$address() {
        return OgaGenerator_GetOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetOutput(const OgaGenerator *generator, const char *name, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaGenerator_GetOutput(MemorySegment generator, MemorySegment name, MemorySegment out) {
        var mh$ = OgaGenerator_GetOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GetOutput", generator, name, out);
            }
            return (MemorySegment)mh$.invokeExact(generator, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GetLogits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GetLogits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetLogits(OgaGenerator *generator, OgaTensor **out)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GetLogits$descriptor() {
        return OgaGenerator_GetLogits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetLogits(OgaGenerator *generator, OgaTensor **out)
     * }
     */
    public static MethodHandle OgaGenerator_GetLogits$handle() {
        return OgaGenerator_GetLogits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetLogits(OgaGenerator *generator, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaGenerator_GetLogits$address() {
        return OgaGenerator_GetLogits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_GetLogits(OgaGenerator *generator, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaGenerator_GetLogits(MemorySegment generator, MemorySegment out) {
        var mh$ = OgaGenerator_GetLogits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GetLogits", generator, out);
            }
            return (MemorySegment)mh$.invokeExact(generator, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_SetLogits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_SetLogits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetLogits(OgaGenerator *generator, OgaTensor *tensor)
     * }
     */
    public static FunctionDescriptor OgaGenerator_SetLogits$descriptor() {
        return OgaGenerator_SetLogits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetLogits(OgaGenerator *generator, OgaTensor *tensor)
     * }
     */
    public static MethodHandle OgaGenerator_SetLogits$handle() {
        return OgaGenerator_SetLogits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetLogits(OgaGenerator *generator, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGenerator_SetLogits$address() {
        return OgaGenerator_SetLogits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGenerator_SetLogits(OgaGenerator *generator, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaGenerator_SetLogits(MemorySegment generator, MemorySegment tensor) {
        var mh$ = OgaGenerator_SetLogits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_SetLogits", generator, tensor);
            }
            return (MemorySegment)mh$.invokeExact(generator, tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GetSequenceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GetSequenceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t OgaGenerator_GetSequenceCount(const OgaGenerator *generator, size_t index)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GetSequenceCount$descriptor() {
        return OgaGenerator_GetSequenceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t OgaGenerator_GetSequenceCount(const OgaGenerator *generator, size_t index)
     * }
     */
    public static MethodHandle OgaGenerator_GetSequenceCount$handle() {
        return OgaGenerator_GetSequenceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t OgaGenerator_GetSequenceCount(const OgaGenerator *generator, size_t index)
     * }
     */
    public static MemorySegment OgaGenerator_GetSequenceCount$address() {
        return OgaGenerator_GetSequenceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t OgaGenerator_GetSequenceCount(const OgaGenerator *generator, size_t index)
     * }
     */
    public static long OgaGenerator_GetSequenceCount(MemorySegment generator, long index) {
        var mh$ = OgaGenerator_GetSequenceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GetSequenceCount", generator, index);
            }
            return (long)mh$.invokeExact(generator, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGenerator_GetSequenceData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGenerator_GetSequenceData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const int32_t *OgaGenerator_GetSequenceData(const OgaGenerator *generator, size_t index)
     * }
     */
    public static FunctionDescriptor OgaGenerator_GetSequenceData$descriptor() {
        return OgaGenerator_GetSequenceData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const int32_t *OgaGenerator_GetSequenceData(const OgaGenerator *generator, size_t index)
     * }
     */
    public static MethodHandle OgaGenerator_GetSequenceData$handle() {
        return OgaGenerator_GetSequenceData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const int32_t *OgaGenerator_GetSequenceData(const OgaGenerator *generator, size_t index)
     * }
     */
    public static MemorySegment OgaGenerator_GetSequenceData$address() {
        return OgaGenerator_GetSequenceData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const int32_t *OgaGenerator_GetSequenceData(const OgaGenerator *generator, size_t index)
     * }
     */
    public static MemorySegment OgaGenerator_GetSequenceData(MemorySegment generator, long index) {
        var mh$ = OgaGenerator_GetSequenceData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGenerator_GetSequenceData", generator, index);
            }
            return (MemorySegment)mh$.invokeExact(generator, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateTokenizer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateTokenizer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizer(const OgaModel *model, OgaTokenizer **out)
     * }
     */
    public static FunctionDescriptor OgaCreateTokenizer$descriptor() {
        return OgaCreateTokenizer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizer(const OgaModel *model, OgaTokenizer **out)
     * }
     */
    public static MethodHandle OgaCreateTokenizer$handle() {
        return OgaCreateTokenizer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizer(const OgaModel *model, OgaTokenizer **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizer$address() {
        return OgaCreateTokenizer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizer(const OgaModel *model, OgaTokenizer **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizer(MemorySegment model, MemorySegment out) {
        var mh$ = OgaCreateTokenizer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateTokenizer", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyTokenizer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyTokenizer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizer(OgaTokenizer *)
     * }
     */
    public static FunctionDescriptor OgaDestroyTokenizer$descriptor() {
        return OgaDestroyTokenizer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizer(OgaTokenizer *)
     * }
     */
    public static MethodHandle OgaDestroyTokenizer$handle() {
        return OgaDestroyTokenizer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizer(OgaTokenizer *)
     * }
     */
    public static MemorySegment OgaDestroyTokenizer$address() {
        return OgaDestroyTokenizer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyTokenizer(OgaTokenizer *)
     * }
     */
    public static void OgaDestroyTokenizer(MemorySegment x0) {
        var mh$ = OgaDestroyTokenizer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyTokenizer", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateMultiModalProcessor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateMultiModalProcessor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateMultiModalProcessor(const OgaModel *model, OgaMultiModalProcessor **out)
     * }
     */
    public static FunctionDescriptor OgaCreateMultiModalProcessor$descriptor() {
        return OgaCreateMultiModalProcessor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateMultiModalProcessor(const OgaModel *model, OgaMultiModalProcessor **out)
     * }
     */
    public static MethodHandle OgaCreateMultiModalProcessor$handle() {
        return OgaCreateMultiModalProcessor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateMultiModalProcessor(const OgaModel *model, OgaMultiModalProcessor **out)
     * }
     */
    public static MemorySegment OgaCreateMultiModalProcessor$address() {
        return OgaCreateMultiModalProcessor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateMultiModalProcessor(const OgaModel *model, OgaMultiModalProcessor **out)
     * }
     */
    public static MemorySegment OgaCreateMultiModalProcessor(MemorySegment model, MemorySegment out) {
        var mh$ = OgaCreateMultiModalProcessor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateMultiModalProcessor", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyMultiModalProcessor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyMultiModalProcessor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyMultiModalProcessor(OgaMultiModalProcessor *processor)
     * }
     */
    public static FunctionDescriptor OgaDestroyMultiModalProcessor$descriptor() {
        return OgaDestroyMultiModalProcessor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyMultiModalProcessor(OgaMultiModalProcessor *processor)
     * }
     */
    public static MethodHandle OgaDestroyMultiModalProcessor$handle() {
        return OgaDestroyMultiModalProcessor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyMultiModalProcessor(OgaMultiModalProcessor *processor)
     * }
     */
    public static MemorySegment OgaDestroyMultiModalProcessor$address() {
        return OgaDestroyMultiModalProcessor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyMultiModalProcessor(OgaMultiModalProcessor *processor)
     * }
     */
    public static void OgaDestroyMultiModalProcessor(MemorySegment processor) {
        var mh$ = OgaDestroyMultiModalProcessor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyMultiModalProcessor", processor);
            }
            mh$.invokeExact(processor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerEncode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerEncode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncode(const OgaTokenizer *, const char *str, OgaSequences *sequences)
     * }
     */
    public static FunctionDescriptor OgaTokenizerEncode$descriptor() {
        return OgaTokenizerEncode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncode(const OgaTokenizer *, const char *str, OgaSequences *sequences)
     * }
     */
    public static MethodHandle OgaTokenizerEncode$handle() {
        return OgaTokenizerEncode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncode(const OgaTokenizer *, const char *str, OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaTokenizerEncode$address() {
        return OgaTokenizerEncode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncode(const OgaTokenizer *, const char *str, OgaSequences *sequences)
     * }
     */
    public static MemorySegment OgaTokenizerEncode(MemorySegment x0, MemorySegment str, MemorySegment sequences) {
        var mh$ = OgaTokenizerEncode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerEncode", x0, str, sequences);
            }
            return (MemorySegment)mh$.invokeExact(x0, str, sequences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerEncodeBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerEncodeBatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncodeBatch(const OgaTokenizer *, const char **strings, size_t count, OgaTensor **out)
     * }
     */
    public static FunctionDescriptor OgaTokenizerEncodeBatch$descriptor() {
        return OgaTokenizerEncodeBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncodeBatch(const OgaTokenizer *, const char **strings, size_t count, OgaTensor **out)
     * }
     */
    public static MethodHandle OgaTokenizerEncodeBatch$handle() {
        return OgaTokenizerEncodeBatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncodeBatch(const OgaTokenizer *, const char **strings, size_t count, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaTokenizerEncodeBatch$address() {
        return OgaTokenizerEncodeBatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerEncodeBatch(const OgaTokenizer *, const char **strings, size_t count, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaTokenizerEncodeBatch(MemorySegment x0, MemorySegment strings, long count, MemorySegment out) {
        var mh$ = OgaTokenizerEncodeBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerEncodeBatch", x0, strings, count, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, strings, count, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerDecodeBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerDecodeBatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecodeBatch(const OgaTokenizer *, const OgaTensor *tensor, OgaStringArray **out)
     * }
     */
    public static FunctionDescriptor OgaTokenizerDecodeBatch$descriptor() {
        return OgaTokenizerDecodeBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecodeBatch(const OgaTokenizer *, const OgaTensor *tensor, OgaStringArray **out)
     * }
     */
    public static MethodHandle OgaTokenizerDecodeBatch$handle() {
        return OgaTokenizerDecodeBatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecodeBatch(const OgaTokenizer *, const OgaTensor *tensor, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaTokenizerDecodeBatch$address() {
        return OgaTokenizerDecodeBatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecodeBatch(const OgaTokenizer *, const OgaTensor *tensor, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaTokenizerDecodeBatch(MemorySegment x0, MemorySegment tensor, MemorySegment out) {
        var mh$ = OgaTokenizerDecodeBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerDecodeBatch", x0, tensor, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, tensor, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerToTokenId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerToTokenId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerToTokenId(const OgaTokenizer *tokenizer, const char *str, int32_t *token_id)
     * }
     */
    public static FunctionDescriptor OgaTokenizerToTokenId$descriptor() {
        return OgaTokenizerToTokenId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerToTokenId(const OgaTokenizer *tokenizer, const char *str, int32_t *token_id)
     * }
     */
    public static MethodHandle OgaTokenizerToTokenId$handle() {
        return OgaTokenizerToTokenId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerToTokenId(const OgaTokenizer *tokenizer, const char *str, int32_t *token_id)
     * }
     */
    public static MemorySegment OgaTokenizerToTokenId$address() {
        return OgaTokenizerToTokenId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerToTokenId(const OgaTokenizer *tokenizer, const char *str, int32_t *token_id)
     * }
     */
    public static MemorySegment OgaTokenizerToTokenId(MemorySegment tokenizer, MemorySegment str, MemorySegment token_id) {
        var mh$ = OgaTokenizerToTokenId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerToTokenId", tokenizer, str, token_id);
            }
            return (MemorySegment)mh$.invokeExact(tokenizer, str, token_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaProcessorProcessImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaProcessorProcessImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImages(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, OgaNamedTensors **input_tensors)
     * }
     */
    public static FunctionDescriptor OgaProcessorProcessImages$descriptor() {
        return OgaProcessorProcessImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImages(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, OgaNamedTensors **input_tensors)
     * }
     */
    public static MethodHandle OgaProcessorProcessImages$handle() {
        return OgaProcessorProcessImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImages(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessImages$address() {
        return OgaProcessorProcessImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImages(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessImages(MemorySegment x0, MemorySegment prompt, MemorySegment images, MemorySegment input_tensors) {
        var mh$ = OgaProcessorProcessImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaProcessorProcessImages", x0, prompt, images, input_tensors);
            }
            return (MemorySegment)mh$.invokeExact(x0, prompt, images, input_tensors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaProcessorProcessAudios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaProcessorProcessAudios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessAudios(const OgaMultiModalProcessor *, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static FunctionDescriptor OgaProcessorProcessAudios$descriptor() {
        return OgaProcessorProcessAudios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessAudios(const OgaMultiModalProcessor *, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MethodHandle OgaProcessorProcessAudios$handle() {
        return OgaProcessorProcessAudios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessAudios(const OgaMultiModalProcessor *, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessAudios$address() {
        return OgaProcessorProcessAudios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessAudios(const OgaMultiModalProcessor *, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessAudios(MemorySegment x0, MemorySegment audios, MemorySegment input_tensors) {
        var mh$ = OgaProcessorProcessAudios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaProcessorProcessAudios", x0, audios, input_tensors);
            }
            return (MemorySegment)mh$.invokeExact(x0, audios, input_tensors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaProcessorProcessImagesAndAudios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaProcessorProcessImagesAndAudios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImagesAndAudios(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static FunctionDescriptor OgaProcessorProcessImagesAndAudios$descriptor() {
        return OgaProcessorProcessImagesAndAudios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImagesAndAudios(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MethodHandle OgaProcessorProcessImagesAndAudios$handle() {
        return OgaProcessorProcessImagesAndAudios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImagesAndAudios(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessImagesAndAudios$address() {
        return OgaProcessorProcessImagesAndAudios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaProcessorProcessImagesAndAudios(const OgaMultiModalProcessor *, const char *prompt, const OgaImages *images, const OgaAudios *audios, OgaNamedTensors **input_tensors)
     * }
     */
    public static MemorySegment OgaProcessorProcessImagesAndAudios(MemorySegment x0, MemorySegment prompt, MemorySegment images, MemorySegment audios, MemorySegment input_tensors) {
        var mh$ = OgaProcessorProcessImagesAndAudios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaProcessorProcessImagesAndAudios", x0, prompt, images, audios, input_tensors);
            }
            return (MemorySegment)mh$.invokeExact(x0, prompt, images, audios, input_tensors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecode(const OgaTokenizer *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static FunctionDescriptor OgaTokenizerDecode$descriptor() {
        return OgaTokenizerDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecode(const OgaTokenizer *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MethodHandle OgaTokenizerDecode$handle() {
        return OgaTokenizerDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecode(const OgaTokenizer *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MemorySegment OgaTokenizerDecode$address() {
        return OgaTokenizerDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerDecode(const OgaTokenizer *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MemorySegment OgaTokenizerDecode(MemorySegment x0, MemorySegment tokens, long token_count, MemorySegment out_string) {
        var mh$ = OgaTokenizerDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerDecode", x0, tokens, token_count, out_string);
            }
            return (MemorySegment)mh$.invokeExact(x0, tokens, token_count, out_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaProcessorDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaProcessorDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorDecode(const OgaMultiModalProcessor *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static FunctionDescriptor OgaProcessorDecode$descriptor() {
        return OgaProcessorDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorDecode(const OgaMultiModalProcessor *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MethodHandle OgaProcessorDecode$handle() {
        return OgaProcessorDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaProcessorDecode(const OgaMultiModalProcessor *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MemorySegment OgaProcessorDecode$address() {
        return OgaProcessorDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaProcessorDecode(const OgaMultiModalProcessor *, const int32_t *tokens, size_t token_count, const char **out_string)
     * }
     */
    public static MemorySegment OgaProcessorDecode(MemorySegment x0, MemorySegment tokens, long token_count, MemorySegment out_string) {
        var mh$ = OgaProcessorDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaProcessorDecode", x0, tokens, token_count, out_string);
            }
            return (MemorySegment)mh$.invokeExact(x0, tokens, token_count, out_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerApplyChatTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_BOOL,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerApplyChatTemplate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerApplyChatTemplate(const OgaTokenizer *, const char *template_str, const char *messages, bool add_generation_prompt, const char **out_string)
     * }
     */
    public static FunctionDescriptor OgaTokenizerApplyChatTemplate$descriptor() {
        return OgaTokenizerApplyChatTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerApplyChatTemplate(const OgaTokenizer *, const char *template_str, const char *messages, bool add_generation_prompt, const char **out_string)
     * }
     */
    public static MethodHandle OgaTokenizerApplyChatTemplate$handle() {
        return OgaTokenizerApplyChatTemplate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerApplyChatTemplate(const OgaTokenizer *, const char *template_str, const char *messages, bool add_generation_prompt, const char **out_string)
     * }
     */
    public static MemorySegment OgaTokenizerApplyChatTemplate$address() {
        return OgaTokenizerApplyChatTemplate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerApplyChatTemplate(const OgaTokenizer *, const char *template_str, const char *messages, bool add_generation_prompt, const char **out_string)
     * }
     */
    public static MemorySegment OgaTokenizerApplyChatTemplate(MemorySegment x0, MemorySegment template_str, MemorySegment messages, boolean add_generation_prompt, MemorySegment out_string) {
        var mh$ = OgaTokenizerApplyChatTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerApplyChatTemplate", x0, template_str, messages, add_generation_prompt, out_string);
            }
            return (MemorySegment)mh$.invokeExact(x0, template_str, messages, add_generation_prompt, out_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateTokenizerStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateTokenizerStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStream(const OgaTokenizer *, OgaTokenizerStream **out)
     * }
     */
    public static FunctionDescriptor OgaCreateTokenizerStream$descriptor() {
        return OgaCreateTokenizerStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStream(const OgaTokenizer *, OgaTokenizerStream **out)
     * }
     */
    public static MethodHandle OgaCreateTokenizerStream$handle() {
        return OgaCreateTokenizerStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStream(const OgaTokenizer *, OgaTokenizerStream **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizerStream$address() {
        return OgaCreateTokenizerStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStream(const OgaTokenizer *, OgaTokenizerStream **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizerStream(MemorySegment x0, MemorySegment out) {
        var mh$ = OgaCreateTokenizerStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateTokenizerStream", x0, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateTokenizerStreamFromProcessor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateTokenizerStreamFromProcessor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStreamFromProcessor(const OgaMultiModalProcessor *, OgaTokenizerStream **out)
     * }
     */
    public static FunctionDescriptor OgaCreateTokenizerStreamFromProcessor$descriptor() {
        return OgaCreateTokenizerStreamFromProcessor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStreamFromProcessor(const OgaMultiModalProcessor *, OgaTokenizerStream **out)
     * }
     */
    public static MethodHandle OgaCreateTokenizerStreamFromProcessor$handle() {
        return OgaCreateTokenizerStreamFromProcessor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStreamFromProcessor(const OgaMultiModalProcessor *, OgaTokenizerStream **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizerStreamFromProcessor$address() {
        return OgaCreateTokenizerStreamFromProcessor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateTokenizerStreamFromProcessor(const OgaMultiModalProcessor *, OgaTokenizerStream **out)
     * }
     */
    public static MemorySegment OgaCreateTokenizerStreamFromProcessor(MemorySegment x0, MemorySegment out) {
        var mh$ = OgaCreateTokenizerStreamFromProcessor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateTokenizerStreamFromProcessor", x0, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyTokenizerStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyTokenizerStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizerStream(OgaTokenizerStream *)
     * }
     */
    public static FunctionDescriptor OgaDestroyTokenizerStream$descriptor() {
        return OgaDestroyTokenizerStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizerStream(OgaTokenizerStream *)
     * }
     */
    public static MethodHandle OgaDestroyTokenizerStream$handle() {
        return OgaDestroyTokenizerStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyTokenizerStream(OgaTokenizerStream *)
     * }
     */
    public static MemorySegment OgaDestroyTokenizerStream$address() {
        return OgaDestroyTokenizerStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyTokenizerStream(OgaTokenizerStream *)
     * }
     */
    public static void OgaDestroyTokenizerStream(MemorySegment x0) {
        var mh$ = OgaDestroyTokenizerStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyTokenizerStream", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTokenizerStreamDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_INT,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTokenizerStreamDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerStreamDecode(OgaTokenizerStream *, int32_t token, const char **out)
     * }
     */
    public static FunctionDescriptor OgaTokenizerStreamDecode$descriptor() {
        return OgaTokenizerStreamDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerStreamDecode(OgaTokenizerStream *, int32_t token, const char **out)
     * }
     */
    public static MethodHandle OgaTokenizerStreamDecode$handle() {
        return OgaTokenizerStreamDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerStreamDecode(OgaTokenizerStream *, int32_t token, const char **out)
     * }
     */
    public static MemorySegment OgaTokenizerStreamDecode$address() {
        return OgaTokenizerStreamDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTokenizerStreamDecode(OgaTokenizerStream *, int32_t token, const char **out)
     * }
     */
    public static MemorySegment OgaTokenizerStreamDecode(MemorySegment x0, int token, MemorySegment out) {
        var mh$ = OgaTokenizerStreamDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTokenizerStreamDecode", x0, token, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, token, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateTensorFromBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_INT,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateTensorFromBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTensorFromBuffer(void *data, const int64_t *shape_dims, size_t shape_dims_count, OgaElementType element_type, OgaTensor **out)
     * }
     */
    public static FunctionDescriptor OgaCreateTensorFromBuffer$descriptor() {
        return OgaCreateTensorFromBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTensorFromBuffer(void *data, const int64_t *shape_dims, size_t shape_dims_count, OgaElementType element_type, OgaTensor **out)
     * }
     */
    public static MethodHandle OgaCreateTensorFromBuffer$handle() {
        return OgaCreateTensorFromBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateTensorFromBuffer(void *data, const int64_t *shape_dims, size_t shape_dims_count, OgaElementType element_type, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaCreateTensorFromBuffer$address() {
        return OgaCreateTensorFromBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateTensorFromBuffer(void *data, const int64_t *shape_dims, size_t shape_dims_count, OgaElementType element_type, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaCreateTensorFromBuffer(MemorySegment data, MemorySegment shape_dims, long shape_dims_count, int element_type, MemorySegment out) {
        var mh$ = OgaCreateTensorFromBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateTensorFromBuffer", data, shape_dims, shape_dims_count, element_type, out);
            }
            return (MemorySegment)mh$.invokeExact(data, shape_dims, shape_dims_count, element_type, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyTensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyTensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyTensor(OgaTensor *tensor)
     * }
     */
    public static FunctionDescriptor OgaDestroyTensor$descriptor() {
        return OgaDestroyTensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyTensor(OgaTensor *tensor)
     * }
     */
    public static MethodHandle OgaDestroyTensor$handle() {
        return OgaDestroyTensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyTensor(OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaDestroyTensor$address() {
        return OgaDestroyTensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyTensor(OgaTensor *tensor)
     * }
     */
    public static void OgaDestroyTensor(MemorySegment tensor) {
        var mh$ = OgaDestroyTensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyTensor", tensor);
            }
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTensorGetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTensorGetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetType(OgaTensor *, OgaElementType *out)
     * }
     */
    public static FunctionDescriptor OgaTensorGetType$descriptor() {
        return OgaTensorGetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetType(OgaTensor *, OgaElementType *out)
     * }
     */
    public static MethodHandle OgaTensorGetType$handle() {
        return OgaTensorGetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetType(OgaTensor *, OgaElementType *out)
     * }
     */
    public static MemorySegment OgaTensorGetType$address() {
        return OgaTensorGetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetType(OgaTensor *, OgaElementType *out)
     * }
     */
    public static MemorySegment OgaTensorGetType(MemorySegment x0, MemorySegment out) {
        var mh$ = OgaTensorGetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTensorGetType", x0, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTensorGetShapeRank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTensorGetShapeRank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShapeRank(OgaTensor *, size_t *out)
     * }
     */
    public static FunctionDescriptor OgaTensorGetShapeRank$descriptor() {
        return OgaTensorGetShapeRank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShapeRank(OgaTensor *, size_t *out)
     * }
     */
    public static MethodHandle OgaTensorGetShapeRank$handle() {
        return OgaTensorGetShapeRank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShapeRank(OgaTensor *, size_t *out)
     * }
     */
    public static MemorySegment OgaTensorGetShapeRank$address() {
        return OgaTensorGetShapeRank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShapeRank(OgaTensor *, size_t *out)
     * }
     */
    public static MemorySegment OgaTensorGetShapeRank(MemorySegment x0, MemorySegment out) {
        var mh$ = OgaTensorGetShapeRank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTensorGetShapeRank", x0, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTensorGetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTensorGetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShape(OgaTensor *, int64_t *shape_dims, size_t shape_dims_count)
     * }
     */
    public static FunctionDescriptor OgaTensorGetShape$descriptor() {
        return OgaTensorGetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShape(OgaTensor *, int64_t *shape_dims, size_t shape_dims_count)
     * }
     */
    public static MethodHandle OgaTensorGetShape$handle() {
        return OgaTensorGetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShape(OgaTensor *, int64_t *shape_dims, size_t shape_dims_count)
     * }
     */
    public static MemorySegment OgaTensorGetShape$address() {
        return OgaTensorGetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetShape(OgaTensor *, int64_t *shape_dims, size_t shape_dims_count)
     * }
     */
    public static MemorySegment OgaTensorGetShape(MemorySegment x0, MemorySegment shape_dims, long shape_dims_count) {
        var mh$ = OgaTensorGetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTensorGetShape", x0, shape_dims, shape_dims_count);
            }
            return (MemorySegment)mh$.invokeExact(x0, shape_dims, shape_dims_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaTensorGetData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaTensorGetData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetData(OgaTensor *, void **out)
     * }
     */
    public static FunctionDescriptor OgaTensorGetData$descriptor() {
        return OgaTensorGetData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetData(OgaTensor *, void **out)
     * }
     */
    public static MethodHandle OgaTensorGetData$handle() {
        return OgaTensorGetData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetData(OgaTensor *, void **out)
     * }
     */
    public static MemorySegment OgaTensorGetData$address() {
        return OgaTensorGetData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaTensorGetData(OgaTensor *, void **out)
     * }
     */
    public static MemorySegment OgaTensorGetData(MemorySegment x0, MemorySegment out) {
        var mh$ = OgaTensorGetData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaTensorGetData", x0, out);
            }
            return (MemorySegment)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateNamedTensors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateNamedTensors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateNamedTensors(OgaNamedTensors **out)
     * }
     */
    public static FunctionDescriptor OgaCreateNamedTensors$descriptor() {
        return OgaCreateNamedTensors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateNamedTensors(OgaNamedTensors **out)
     * }
     */
    public static MethodHandle OgaCreateNamedTensors$handle() {
        return OgaCreateNamedTensors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateNamedTensors(OgaNamedTensors **out)
     * }
     */
    public static MemorySegment OgaCreateNamedTensors$address() {
        return OgaCreateNamedTensors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateNamedTensors(OgaNamedTensors **out)
     * }
     */
    public static MemorySegment OgaCreateNamedTensors(MemorySegment out) {
        var mh$ = OgaCreateNamedTensors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateNamedTensors", out);
            }
            return (MemorySegment)mh$.invokeExact(out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaNamedTensorsGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaNamedTensorsGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGet(OgaNamedTensors *named_tensors, const char *name, OgaTensor **out)
     * }
     */
    public static FunctionDescriptor OgaNamedTensorsGet$descriptor() {
        return OgaNamedTensorsGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGet(OgaNamedTensors *named_tensors, const char *name, OgaTensor **out)
     * }
     */
    public static MethodHandle OgaNamedTensorsGet$handle() {
        return OgaNamedTensorsGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGet(OgaNamedTensors *named_tensors, const char *name, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaNamedTensorsGet$address() {
        return OgaNamedTensorsGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGet(OgaNamedTensors *named_tensors, const char *name, OgaTensor **out)
     * }
     */
    public static MemorySegment OgaNamedTensorsGet(MemorySegment named_tensors, MemorySegment name, MemorySegment out) {
        var mh$ = OgaNamedTensorsGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaNamedTensorsGet", named_tensors, name, out);
            }
            return (MemorySegment)mh$.invokeExact(named_tensors, name, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaNamedTensorsSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaNamedTensorsSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsSet(OgaNamedTensors *named_tensors, const char *name, OgaTensor *tensor)
     * }
     */
    public static FunctionDescriptor OgaNamedTensorsSet$descriptor() {
        return OgaNamedTensorsSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsSet(OgaNamedTensors *named_tensors, const char *name, OgaTensor *tensor)
     * }
     */
    public static MethodHandle OgaNamedTensorsSet$handle() {
        return OgaNamedTensorsSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsSet(OgaNamedTensors *named_tensors, const char *name, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaNamedTensorsSet$address() {
        return OgaNamedTensorsSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsSet(OgaNamedTensors *named_tensors, const char *name, OgaTensor *tensor)
     * }
     */
    public static MemorySegment OgaNamedTensorsSet(MemorySegment named_tensors, MemorySegment name, MemorySegment tensor) {
        var mh$ = OgaNamedTensorsSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaNamedTensorsSet", named_tensors, name, tensor);
            }
            return (MemorySegment)mh$.invokeExact(named_tensors, name, tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaNamedTensorsDelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaNamedTensorsDelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsDelete(OgaNamedTensors *named_tensors, const char *name)
     * }
     */
    public static FunctionDescriptor OgaNamedTensorsDelete$descriptor() {
        return OgaNamedTensorsDelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsDelete(OgaNamedTensors *named_tensors, const char *name)
     * }
     */
    public static MethodHandle OgaNamedTensorsDelete$handle() {
        return OgaNamedTensorsDelete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsDelete(OgaNamedTensors *named_tensors, const char *name)
     * }
     */
    public static MemorySegment OgaNamedTensorsDelete$address() {
        return OgaNamedTensorsDelete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsDelete(OgaNamedTensors *named_tensors, const char *name)
     * }
     */
    public static MemorySegment OgaNamedTensorsDelete(MemorySegment named_tensors, MemorySegment name) {
        var mh$ = OgaNamedTensorsDelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaNamedTensorsDelete", named_tensors, name);
            }
            return (MemorySegment)mh$.invokeExact(named_tensors, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaNamedTensorsCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaNamedTensorsCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsCount(const OgaNamedTensors *named_tensors, size_t *out)
     * }
     */
    public static FunctionDescriptor OgaNamedTensorsCount$descriptor() {
        return OgaNamedTensorsCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsCount(const OgaNamedTensors *named_tensors, size_t *out)
     * }
     */
    public static MethodHandle OgaNamedTensorsCount$handle() {
        return OgaNamedTensorsCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsCount(const OgaNamedTensors *named_tensors, size_t *out)
     * }
     */
    public static MemorySegment OgaNamedTensorsCount$address() {
        return OgaNamedTensorsCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsCount(const OgaNamedTensors *named_tensors, size_t *out)
     * }
     */
    public static MemorySegment OgaNamedTensorsCount(MemorySegment named_tensors, MemorySegment out) {
        var mh$ = OgaNamedTensorsCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaNamedTensorsCount", named_tensors, out);
            }
            return (MemorySegment)mh$.invokeExact(named_tensors, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaNamedTensorsGetNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaNamedTensorsGetNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGetNames(const OgaNamedTensors *named_tensors, OgaStringArray **out)
     * }
     */
    public static FunctionDescriptor OgaNamedTensorsGetNames$descriptor() {
        return OgaNamedTensorsGetNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGetNames(const OgaNamedTensors *named_tensors, OgaStringArray **out)
     * }
     */
    public static MethodHandle OgaNamedTensorsGetNames$handle() {
        return OgaNamedTensorsGetNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGetNames(const OgaNamedTensors *named_tensors, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaNamedTensorsGetNames$address() {
        return OgaNamedTensorsGetNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaNamedTensorsGetNames(const OgaNamedTensors *named_tensors, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaNamedTensorsGetNames(MemorySegment named_tensors, MemorySegment out) {
        var mh$ = OgaNamedTensorsGetNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaNamedTensorsGetNames", named_tensors, out);
            }
            return (MemorySegment)mh$.invokeExact(named_tensors, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSetCurrentGpuDeviceId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_INT
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSetCurrentGpuDeviceId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaSetCurrentGpuDeviceId(int device_id)
     * }
     */
    public static FunctionDescriptor OgaSetCurrentGpuDeviceId$descriptor() {
        return OgaSetCurrentGpuDeviceId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaSetCurrentGpuDeviceId(int device_id)
     * }
     */
    public static MethodHandle OgaSetCurrentGpuDeviceId$handle() {
        return OgaSetCurrentGpuDeviceId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaSetCurrentGpuDeviceId(int device_id)
     * }
     */
    public static MemorySegment OgaSetCurrentGpuDeviceId$address() {
        return OgaSetCurrentGpuDeviceId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaSetCurrentGpuDeviceId(int device_id)
     * }
     */
    public static MemorySegment OgaSetCurrentGpuDeviceId(int device_id) {
        var mh$ = OgaSetCurrentGpuDeviceId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSetCurrentGpuDeviceId", device_id);
            }
            return (MemorySegment)mh$.invokeExact(device_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaGetCurrentGpuDeviceId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaGetCurrentGpuDeviceId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaGetCurrentGpuDeviceId(int *device_id)
     * }
     */
    public static FunctionDescriptor OgaGetCurrentGpuDeviceId$descriptor() {
        return OgaGetCurrentGpuDeviceId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaGetCurrentGpuDeviceId(int *device_id)
     * }
     */
    public static MethodHandle OgaGetCurrentGpuDeviceId$handle() {
        return OgaGetCurrentGpuDeviceId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaGetCurrentGpuDeviceId(int *device_id)
     * }
     */
    public static MemorySegment OgaGetCurrentGpuDeviceId$address() {
        return OgaGetCurrentGpuDeviceId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaGetCurrentGpuDeviceId(int *device_id)
     * }
     */
    public static MemorySegment OgaGetCurrentGpuDeviceId(MemorySegment device_id) {
        var mh$ = OgaGetCurrentGpuDeviceId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaGetCurrentGpuDeviceId", device_id);
            }
            return (MemorySegment)mh$.invokeExact(device_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateStringArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateStringArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArray(OgaStringArray **out)
     * }
     */
    public static FunctionDescriptor OgaCreateStringArray$descriptor() {
        return OgaCreateStringArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArray(OgaStringArray **out)
     * }
     */
    public static MethodHandle OgaCreateStringArray$handle() {
        return OgaCreateStringArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArray(OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaCreateStringArray$address() {
        return OgaCreateStringArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArray(OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaCreateStringArray(MemorySegment out) {
        var mh$ = OgaCreateStringArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateStringArray", out);
            }
            return (MemorySegment)mh$.invokeExact(out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateStringArrayFromStrings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateStringArrayFromStrings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArrayFromStrings(const char *const *strs, size_t count, OgaStringArray **out)
     * }
     */
    public static FunctionDescriptor OgaCreateStringArrayFromStrings$descriptor() {
        return OgaCreateStringArrayFromStrings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArrayFromStrings(const char *const *strs, size_t count, OgaStringArray **out)
     * }
     */
    public static MethodHandle OgaCreateStringArrayFromStrings$handle() {
        return OgaCreateStringArrayFromStrings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArrayFromStrings(const char *const *strs, size_t count, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaCreateStringArrayFromStrings$address() {
        return OgaCreateStringArrayFromStrings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateStringArrayFromStrings(const char *const *strs, size_t count, OgaStringArray **out)
     * }
     */
    public static MemorySegment OgaCreateStringArrayFromStrings(MemorySegment strs, long count, MemorySegment out) {
        var mh$ = OgaCreateStringArrayFromStrings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateStringArrayFromStrings", strs, count, out);
            }
            return (MemorySegment)mh$.invokeExact(strs, count, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyStringArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyStringArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyStringArray(OgaStringArray *string_array)
     * }
     */
    public static FunctionDescriptor OgaDestroyStringArray$descriptor() {
        return OgaDestroyStringArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyStringArray(OgaStringArray *string_array)
     * }
     */
    public static MethodHandle OgaDestroyStringArray$handle() {
        return OgaDestroyStringArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyStringArray(OgaStringArray *string_array)
     * }
     */
    public static MemorySegment OgaDestroyStringArray$address() {
        return OgaDestroyStringArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyStringArray(OgaStringArray *string_array)
     * }
     */
    public static void OgaDestroyStringArray(MemorySegment string_array) {
        var mh$ = OgaDestroyStringArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyStringArray", string_array);
            }
            mh$.invokeExact(string_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaStringArrayAddString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaStringArrayAddString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayAddString(OgaStringArray *string_array, const char *str)
     * }
     */
    public static FunctionDescriptor OgaStringArrayAddString$descriptor() {
        return OgaStringArrayAddString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayAddString(OgaStringArray *string_array, const char *str)
     * }
     */
    public static MethodHandle OgaStringArrayAddString$handle() {
        return OgaStringArrayAddString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayAddString(OgaStringArray *string_array, const char *str)
     * }
     */
    public static MemorySegment OgaStringArrayAddString$address() {
        return OgaStringArrayAddString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayAddString(OgaStringArray *string_array, const char *str)
     * }
     */
    public static MemorySegment OgaStringArrayAddString(MemorySegment string_array, MemorySegment str) {
        var mh$ = OgaStringArrayAddString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaStringArrayAddString", string_array, str);
            }
            return (MemorySegment)mh$.invokeExact(string_array, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaStringArrayGetCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaStringArrayGetCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetCount(const OgaStringArray *string_array, size_t *out)
     * }
     */
    public static FunctionDescriptor OgaStringArrayGetCount$descriptor() {
        return OgaStringArrayGetCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetCount(const OgaStringArray *string_array, size_t *out)
     * }
     */
    public static MethodHandle OgaStringArrayGetCount$handle() {
        return OgaStringArrayGetCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetCount(const OgaStringArray *string_array, size_t *out)
     * }
     */
    public static MemorySegment OgaStringArrayGetCount$address() {
        return OgaStringArrayGetCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetCount(const OgaStringArray *string_array, size_t *out)
     * }
     */
    public static MemorySegment OgaStringArrayGetCount(MemorySegment string_array, MemorySegment out) {
        var mh$ = OgaStringArrayGetCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaStringArrayGetCount", string_array, out);
            }
            return (MemorySegment)mh$.invokeExact(string_array, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaStringArrayGetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_LONG,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaStringArrayGetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetString(const OgaStringArray *string_array, size_t index, const char **out)
     * }
     */
    public static FunctionDescriptor OgaStringArrayGetString$descriptor() {
        return OgaStringArrayGetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetString(const OgaStringArray *string_array, size_t index, const char **out)
     * }
     */
    public static MethodHandle OgaStringArrayGetString$handle() {
        return OgaStringArrayGetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetString(const OgaStringArray *string_array, size_t index, const char **out)
     * }
     */
    public static MemorySegment OgaStringArrayGetString$address() {
        return OgaStringArrayGetString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaStringArrayGetString(const OgaStringArray *string_array, size_t index, const char **out)
     * }
     */
    public static MemorySegment OgaStringArrayGetString(MemorySegment string_array, long index, MemorySegment out) {
        var mh$ = OgaStringArrayGetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaStringArrayGetString", string_array, index, out);
            }
            return (MemorySegment)mh$.invokeExact(string_array, index, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaCreateAdapters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaCreateAdapters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateAdapters(const OgaModel *model, OgaAdapters **out)
     * }
     */
    public static FunctionDescriptor OgaCreateAdapters$descriptor() {
        return OgaCreateAdapters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateAdapters(const OgaModel *model, OgaAdapters **out)
     * }
     */
    public static MethodHandle OgaCreateAdapters$handle() {
        return OgaCreateAdapters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaCreateAdapters(const OgaModel *model, OgaAdapters **out)
     * }
     */
    public static MemorySegment OgaCreateAdapters$address() {
        return OgaCreateAdapters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaCreateAdapters(const OgaModel *model, OgaAdapters **out)
     * }
     */
    public static MemorySegment OgaCreateAdapters(MemorySegment model, MemorySegment out) {
        var mh$ = OgaCreateAdapters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaCreateAdapters", model, out);
            }
            return (MemorySegment)mh$.invokeExact(model, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaDestroyAdapters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaDestroyAdapters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OgaDestroyAdapters(OgaAdapters *adapters)
     * }
     */
    public static FunctionDescriptor OgaDestroyAdapters$descriptor() {
        return OgaDestroyAdapters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OgaDestroyAdapters(OgaAdapters *adapters)
     * }
     */
    public static MethodHandle OgaDestroyAdapters$handle() {
        return OgaDestroyAdapters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OgaDestroyAdapters(OgaAdapters *adapters)
     * }
     */
    public static MemorySegment OgaDestroyAdapters$address() {
        return OgaDestroyAdapters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OgaDestroyAdapters(OgaAdapters *adapters)
     * }
     */
    public static void OgaDestroyAdapters(MemorySegment adapters) {
        var mh$ = OgaDestroyAdapters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaDestroyAdapters", adapters);
            }
            mh$.invokeExact(adapters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaLoadAdapter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaLoadAdapter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAdapter(OgaAdapters *adapters, const char *adapter_file_path, const char *adapter_name)
     * }
     */
    public static FunctionDescriptor OgaLoadAdapter$descriptor() {
        return OgaLoadAdapter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAdapter(OgaAdapters *adapters, const char *adapter_file_path, const char *adapter_name)
     * }
     */
    public static MethodHandle OgaLoadAdapter$handle() {
        return OgaLoadAdapter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaLoadAdapter(OgaAdapters *adapters, const char *adapter_file_path, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaLoadAdapter$address() {
        return OgaLoadAdapter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaLoadAdapter(OgaAdapters *adapters, const char *adapter_file_path, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaLoadAdapter(MemorySegment adapters, MemorySegment adapter_file_path, MemorySegment adapter_name) {
        var mh$ = OgaLoadAdapter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaLoadAdapter", adapters, adapter_file_path, adapter_name);
            }
            return (MemorySegment)mh$.invokeExact(adapters, adapter_file_path, adapter_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaUnloadAdapter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaUnloadAdapter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaUnloadAdapter(OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static FunctionDescriptor OgaUnloadAdapter$descriptor() {
        return OgaUnloadAdapter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaUnloadAdapter(OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MethodHandle OgaUnloadAdapter$handle() {
        return OgaUnloadAdapter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaUnloadAdapter(OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaUnloadAdapter$address() {
        return OgaUnloadAdapter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaUnloadAdapter(OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaUnloadAdapter(MemorySegment adapters, MemorySegment adapter_name) {
        var mh$ = OgaUnloadAdapter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaUnloadAdapter", adapters, adapter_name);
            }
            return (MemorySegment)mh$.invokeExact(adapters, adapter_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OgaSetActiveAdapter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER,
            OrtGenApi.C_POINTER
        );

        public static final MemorySegment ADDR = OrtGenApi.findOrThrow("OgaSetActiveAdapter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OgaResult *OgaSetActiveAdapter(OgaGenerator *generator, OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static FunctionDescriptor OgaSetActiveAdapter$descriptor() {
        return OgaSetActiveAdapter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OgaResult *OgaSetActiveAdapter(OgaGenerator *generator, OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MethodHandle OgaSetActiveAdapter$handle() {
        return OgaSetActiveAdapter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OgaResult *OgaSetActiveAdapter(OgaGenerator *generator, OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaSetActiveAdapter$address() {
        return OgaSetActiveAdapter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OgaResult *OgaSetActiveAdapter(OgaGenerator *generator, OgaAdapters *adapters, const char *adapter_name)
     * }
     */
    public static MemorySegment OgaSetActiveAdapter(MemorySegment generator, MemorySegment adapters, MemorySegment adapter_name) {
        var mh$ = OgaSetActiveAdapter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OgaSetActiveAdapter", generator, adapters, adapter_name);
            }
            return (MemorySegment)mh$.invokeExact(generator, adapters, adapter_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = OrtGenApi.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
}

