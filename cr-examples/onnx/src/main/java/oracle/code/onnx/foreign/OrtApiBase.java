// Generated by jextract

package oracle.code.onnx.foreign;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OrtApiBase {
 *     const OrtApi *(*GetApi)(uint32_t);
 *     const char *(*GetVersionString)(void);
 * }
 * }
 */
public class OrtApiBase {

    OrtApiBase() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        onnxruntime_c_api_h.C_POINTER.withName("GetApi"),
        onnxruntime_c_api_h.C_POINTER.withName("GetVersionString")
    ).withName("OrtApiBase");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * const OrtApi *(*GetApi)(uint32_t)
     * }
     */
    private static class GetApi {

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_INT
        );

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetApi$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetApi"));

    private static final long GetApi$OFFSET = $LAYOUT.byteOffset(groupElement("GetApi"));

    /**
     * Invoker for field:
     * {@snippet lang=c :
     * const OrtApi *(*GetApi)(uint32_t)
     * }
     */
    public static MemorySegment GetApi(MemorySegment struct, int _x0) {
        var funcPtr = struct.get(GetApi$LAYOUT, GetApi$OFFSET);
        return GetApi.invoke(funcPtr, _x0);
    }

    /**
     * {@snippet lang=c :
     * const char *(*GetVersionString)(void)
     * }
     */
    private static class GetVersionString {

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER);

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetVersionString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetVersionString"));

    private static final long GetVersionString$OFFSET = $LAYOUT.byteOffset(groupElement("GetVersionString"));

    /**
     * Invoker for field:
     * {@snippet lang=c :
     * const char *(*GetVersionString)(void)
     * }
     */
    public static MemorySegment GetVersionString(MemorySegment struct) {
        var funcPtr = struct.get(GetVersionString$LAYOUT, GetVersionString$OFFSET);
        return GetVersionString.invoke(funcPtr);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

