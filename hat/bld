/* vim: set ft=java:
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;

void main(String[] args) {
 var hatDir = Dir.current();



    /*
     *  ./
     *    +--build/                     All jars, native libs and executables
     *    |    +--cmake-build-debug/    All intermediate cmake artifacts
     *    |
     *    +--stage/
     *    |    +--repo/                 All downloaded maven assets
     *    |    |
     *    |    +--jextract/             All jextracted files
     *    |    |    +--opencl
     *    |    |    +--opengl
     *    |    |    +--cuda
     *    |
     *    +--hat                        * Note maven style layout
     *    |    +--src/main/java
     *    |    |    +--hat/
     *    |    |
     *    |    +--src/main/test
     *    |         +--hat/
     *    |
     *    +--backends
     *    |    +--opencl                (*)
     *    |    +--ptx                   (*)
     *    |    +--mock                  (*)
     *    |    +--spirv                 (*)
     *    |    +--cuda                  (*)
     *    |    +--hip                   (*)
     *    |
     *    +--examples
     *    |    +--mandel                (*)
     *    |    +--squares               (*)
     *    |    +--heal                  (*)
     *    |    +--life                  (*)
     *    |    +--violajones            (*)
     *
     */

    var hatCoreDir = hatDir.existingDir("hat");
    var backendsDir = hatDir.existingDir("backends");
    var examplesDir = hatDir.existingDir("examples");
    var stageDir = hatDir.buildDir("stage").create();
    var repoDir = stageDir.repoDir("repo").create();
    var jextractDir = stageDir.buildDir("jextract").create();

    var buildDir = BuildDir.of(hatDir.path("build")).create();
    var cmakeBuildDir = buildDir.cMakeBuildDir("cmake-build-debug");

    var extractOpenCL= false;
    var extractOpenGL= false;
    if (extractOpenCL || extractOpenGL){
       var optionalJextract =fromPATH("jextract");
       if (optionalJextract.isPresent()){
          var jextract = Jextract.of(optionalJextract.get());
          if (extractOpenCL){
             var extractedOpenCLJar = buildDir.jarFile("jextracted-opencl.jar");
             if (extractedOpenCLJar.exists()) {
                println("We have prebuilt " + extractedOpenCLJar.path());
             } else {
                var openclSource = jextractDir.sourceDir("opencl");
                if (openclSource.exists()) {
                   println("We have already extracted " + openclSource.path() + " to the staging area");
                }else{
                   jextract.extract($ -> {
                      $.output(jextractDir).target_package(openclSource.fileName());
                      switch (os) {
                        case OS.Mac mac -> $
                           .compile_flag("-F" + mac.appLibFrameworks())
                           .library(mac.frameworkLibrary("OpenCL"))
                           .header(mac.frameworkHeader("OpenCL", "opencl.h"));
                        case OS.Linux linux -> {}
                           default -> throw new RuntimeException("Unsupported OS: " + os);
                      }
                   });
                }
                extractedOpenCLJar.create($ -> $.javac($$ -> $$.source(24).source_path(openclSource)));
             }
          }
          if (extractOpenGL){
             var extractedOpenGLJar = buildDir.jarFile("jextracted-opengl.jar");
             if (extractedOpenGLJar.exists()) {
                println("We have prebuilt " + extractedOpenGLJar.path());
             } else {
               var openglSource = jextractDir.sourceDir("opengl");
               if (openglSource.exists()) {
                   println("We have already extracted " + openglSource.path() + " to the staging area");
               }else{
                  jextract.extract($ -> {
                     $.output(jextractDir).target_package(openglSource.fileName());
                     switch (os) {
                        case OS.Mac mac -> $
                           .compile_flag("-F" + mac.appLibFrameworks())
                           .library(mac.frameworkLibrary("GLUT"), mac.frameworkLibrary("OpenGL")) .header(mac.frameworkHeader("GLUT", "glut.h"));
                        case OS.Linux linux -> {}
                        default -> throw new RuntimeException("Unsupported OS: " + os);
                     }
                  });
               }
               extractedOpenGLJar.create($ -> $.javac($$ -> $$.source(24).source_path(openglSource)));
             }
         }
      }else{
         println("Failed to locate jextract in the path.  Some examples and some backends will be skipped!");
      }
   }


 var hatOpts = JavaOpts.of()
   .enable_preview().add_modules("jdk.incubator.code")
   .add_exports("java.base", List.of("jdk.internal", "jdk.internal.vm.annotation"), "ALL-UNNAMED");

 var hatJar = buildDir.jarFile("hat-1.0.jar", $->$
   .javac($$->$$.opts(hatOpts)
      .source(24)
      .source_path(hatCoreDir.sourceDir("src/main/java"))
   )
 );

// This allows us to essentially concat the backends and examples into a single stream
record TypedDir(String type, Dir dir) {
  public String jarName(){
    return "hat-"+type()+"-" + dir().fileName() + "-1.0.jar";
  }
}

//We exclude hip and spirv until we have staged beehive spirv. Once we have spirv staged remove hip and spirv from the regex below
Predicate<Dir>  examplePredicate = example -> !example.matches("^.*(experiments|target|.idea)$");
Predicate<Dir>  backendPredicate = backend -> !backend.matches("^.*(hip|spirv|shared|target|.idea)$");


Stream.concat(
  backendsDir.subDirs().filter(backendPredicate).map(backend->new TypedDir("backend",backend)),
  examplesDir.subDirs().filter(examplePredicate).map(example->new TypedDir("example",example))
  ) .parallel()
    .peek(typeDir->println(typeDir.jarName()))
    .forEach(typeDir->
       buildDir.jarFile(typeDir.jarName(), $->$
          .javac($$->$$.opts(hatOpts)
              .source(24)
              .class_path(hatJar)
              .source_path(typeDir.dir().sourceDir("src/main/java"))
          )
          .whenExists(typeDir.dir().dir("src/main/resources"), (resources,_)->$
              .dir_list(resources)
          )
       )
    );

  var hatlessNBodyDir = hatDir.dir("hatless-examples/nbody");

  buildDir.jarFile("hatless-example-nbody.jar", $->$
     .javac($$->$$.opts(hatOpts)
         .source(24)
         .class_path(buildDir.jarFile("jextracted-opencl.jar"),buildDir.jarFile("jextracted-opengl.jar"))
         .source_path(hatlessNBodyDir.sourceDir("src/main/java"))
     )
     .dir_list(hatlessNBodyDir.dir("src/main/resources"))
 );

 if (!cmakeBuildDir.exists()) {
   cmake($->$
     .source_dir(backendsDir)
     .build_dir(cmakeBuildDir)
     .copy_to(buildDir)
   );
 }

 cmake($->$
   .build(cmakeBuildDir)
 );

}
