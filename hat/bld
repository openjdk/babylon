/* vim: set ft=java:
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;
import static java.lang.System.*;

void main(String[] args) {

    /*
     *  ./
     *    +--build/                     All jars, native libs and executables
     *    |    +--cmake-build-debug/    All intermediate cmake artifacts
     *    |
     *    +--stage/
     *    |    +--repo/                 All downloaded maven assets
     *    |    |
     *    |    +--jextract/             All jextracted files
     *    |    |    +--opencl
     *    |    |    +--opengl
     *    |    |    +--cuda
     *    |
     *    +--hat                        * Note maven style layout
     *    |    +--src/main/java
     *    |    |    +--hat/
     *    |    |
     *    |    +--src/main/test
     *    |         +--hat/
     *    |
     *    +--backends
     *    |    +--java
     *    |    |    +--mt                    (*)
     *    |    |    +--seq                   (*)
     *    |    +--jextracted
     *    |    |    +--opencl                (*)
     *    |    +--ffi
     *    |    |    +--opencl                (*)
     *    |    |    +--ptx                   (*)
     *    |    |    +--mock                  (*)
     *    |    |    +--spirv                 (*)
     *    |    |    +--cuda                  (*)
     *    |    |    +--hip                   (*)
     *    |
     *    +--examples
     *    |    +--mandel                (*)
     *    |    +--squares               (*)
     *    |    +--heal                  (*)
     *    |    +--life                  (*)
     *    |    +--violajones            (*)
     *
     */

    var dir = DirEntry.current();
    var hatCoreDir = dir.existingDir("hat");
    var backends = dir.existingDir("backends");
    var examples = dir.existingDir("examples");
    var wrapsDir = dir.existingDir("wrap");
    var stageDir = dir.buildDir("stage").create();
    var buildDir = BuildDir.of(dir.path("build")).create();
    var cmakeBuildDir = buildDir.cMakeBuildDir("cmake-build-debug");

    var openclCapability = Capabilities.OpenCL.of();
    var openglCapability = Capabilities.OpenGL.of();
    var cudaCapability = Capabilities.CUDA.of();
    var hipCapability = Capabilities.HIP.of();
    var jextractCapability = Capabilities.JExtract.of();// or Capability.JExtract.of(Path.of("/my/jextract-22/bin/jextract"));
    var cmakeCapability = Capabilities.CMake.of();

    Capabilities capabilities = Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);

    if (cmakeCapability.available()) {
        cmakeCapability.probe(buildDir, capabilities);
    }

    capabilities.capabilities().forEach(fw -> out.print( "["+fw.name + (fw.available() ? "\u2714" : "\u2715") +"]"));
    out.println();

    var verbose = false;
    var wrapJar= buildDir.jarFile("wrap.jar");
    var clWrapJar= buildDir.jarFile("clwrap.jar");
    var glWrapJar= buildDir.jarFile("glwrap.jar");
    var cuWrapJar= buildDir.jarFile("cuwrap.jar");
    var hatJar = buildDir.jarFile("hat-1.0.jar");

 var hatJavacOpts = javacBuilder($ -> $
            .enable_preview()
            .add_modules("jdk.incubator.code")
            .add_exports_to_all_unnamed("java.base", "jdk.internal", "jdk.internal.vm.annotation")
            .current_source()
    );

    var hatJarOptions = jarBuilder($ -> $
            .verbose(verbose)
    );
    jar(hatJarOptions, jar -> jar
            .jarFile(hatJar)
            .maven_style_root(hatCoreDir)
            .javac(hatJavacOpts, javac -> {
            })
    );

    jar(jar -> jar
         .jarFile(wrapJar)
         .maven_style_root(wrapsDir.dir("wrap"))
         .javac(javac -> javac.current_source())
    );

    if (jextractCapability.available()) {
        if (openclCapability.available()) {
            if (!openclCapability.jarFile(buildDir).exists()) {
                if (!openclCapability.stage(stageDir).exists()) {
                    jextract(jextractCapability.executable, $ -> $ .verbose(verbose) .capability(openclCapability,stageDir));
                }else{
                    out.println("Using previously extracted  "+openclCapability.stage(buildDir).fileName());
                }
                jar(jar -> jar
                    .jarFile(openclCapability.jarFile(buildDir))
                    .javac(javac -> javac.current_source().source_path(SourceDir.of(openclCapability.stage(stageDir).path())))

                );
            }else{
                out.println("Using existing extracted "+openclCapability.jarFile(buildDir).fileName());
            }
            jar(jar -> jar
               .jarFile(clWrapJar)
               .maven_style_root(wrapsDir.dir("clwrap"))
               .javac(javac -> javac.current_source().class_path(wrapJar,hatJar, openclCapability.jarFile(buildDir)))
            );
        } else {
            out.println("This platform does not have OpenCL");
        }

        if (openglCapability.available()) {
            if (!openglCapability.jarFile(buildDir).exists()) {
                if (!openglCapability.stage(stageDir).exists()) {
                    jextract(jextractCapability, $ -> $ .verbose(verbose) .capability(openglCapability, stageDir));
                }else{
                    out.println("Using previously extracted  "+openglCapability.stage(buildDir).fileName());
                }
                jar(jar -> jar
                        .jarFile(openglCapability.jarFile(buildDir))
                        .javac(javac -> javac.current_source().source_path(SourceDir.of(openglCapability.stage(stageDir).path())))
                );
            }else{
                out.println("Using existing extracted "+openglCapability.jarFile(buildDir).fileName());
            }
            jar(jar -> jar
               .jarFile(glWrapJar)
               .maven_style_root(wrapsDir.dir("glwrap"))
               .javac(javac -> javac
                  .current_source()
                  .exclude(javaSrc -> javaSrc.matches("^.*/wrap/glwrap/GLCallbackEventHandler\\.java$"))
                  //.exclude(javaSrc -> javaSrc.matches("^.*/wrap/glwrap/GLFuncEventHandler\\.java$"))
                  .class_path(wrapJar, openglCapability.jarFile(buildDir))
               )
            );
        } else {
            out.println("This platform does not have OpenGL");
        }


        if (cudaCapability.available()) {

        } else {
            out.println("This platform does not have CUDA");
        }
    }
   

    // Here we create all ffi-backend jars.
    var ffiBackends = backends.existingDir("ffi");
    ffiBackends.subDirs()
            .filter(backend -> backend.failsToMatch("^.*(spirv|hip|shared|target|.idea)$"))
            .forEach(backend -> {
                var ffiBackendJarFile = buildDir.jarFile("hat-backend-ffi-" + backend.fileName() + "-1.0.jar");
                out.println(ffiBackendJarFile.fileName());
                jar(hatJarOptions, jar -> jar
                        .jarFile(ffiBackendJarFile)
                        .maven_style_root(backend)
                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))
                );
            });

    // Here we create jextracted-backend jars.
    var jextractedBackends = backends.existingDir("jextracted");
    var jextractedBackendSharedDir = jextractedBackends.dir("shared");
    out.println("Shared jextracted "+jextractedBackendSharedDir.path());
    var jextractedBackendSharedResult = jar(hatJarOptions, jar -> jar
          .jarFile(buildDir.jarFile("hat-backend-jextracted-shared-1.0.jar"))
          .maven_style_root(jextractedBackendSharedDir)
          .javac(hatJavacOpts, javac -> javac.verbose(verbose)
              .class_path(hatJar)
          )
    ); 

    if (openclCapability.available()){
       var jextractedBackendOpenCLDir = jextractedBackends.dir("opencl");
       out.println("OpenCL jextracted "+jextractedBackendOpenCLDir.path());
       jar(hatJarOptions, jar -> jar
          .jarFile(buildDir.jarFile("hat-backend-jextracted-opencl-1.0.jar"))
          .maven_style_root(jextractedBackendOpenCLDir)
          .javac(hatJavacOpts, javac -> javac.verbose(verbose)
              .class_path(hatJar, openclCapability.jarFile(buildDir), jextractedBackendSharedResult )
          )
       );
   }


    // Here we create all java backend jars.
    backends.existingDir("java")
            .subDirs()
            .filter(backend -> backend.failsToMatch("^.*(target|.idea)$"))
            .forEach(backend -> {
                var backendJarFile = buildDir.jarFile("hat-backend-java-" + backend.fileName() + "-1.0.jar");
                out.println(backendJarFile.fileName());
                jar(hatJarOptions, jar -> jar
                        .jarFile(backendJarFile)
                        .dir_list(backend.dir("src/main/resources"))
                );
            });


    // here we create the example jars
    examples.subDirs()
            .filter(example -> example.failsToMatch("^.*(experiments|nbody|life|target|.idea)$"))
            .forEach(example -> {
                var exampleJarFile = buildDir.jarFile("hat-example-" + example.fileName() + "-1.0.jar");
                out.println(exampleJarFile.fileName());
                jar(hatJarOptions, jar -> jar
                        .jarFile(exampleJarFile)
                        .maven_style_root(example)
                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))
                        .manifest(manifest -> manifest .main_class(example.fileName() + ".Main"))
                );
            });

    
    if (jextractCapability.available() && openclCapability.available()) {
        var example = examples.dir("life");
        var exampleJarFile = buildDir.jarFile("hat-example-" + example.fileName() + "-1.0.jar");
        out.println(exampleJarFile.fileName());
        jar(hatJarOptions, jar -> jar
                .jarFile(exampleJarFile)
                .maven_style_root(example)
                .javac(hatJavacOpts, javac -> javac
                   .class_path(hatJar, wrapJar, clWrapJar, openclCapability.jarFile(buildDir), buildDir.jarFile("hat-backend-ffi-opencl-1.0.jar"))
                )
        );
    }


    if (jextractCapability.available() && openclCapability.available() && openglCapability.available()) {
        var example = examples.dir("nbody");
        var exampleJarFile = buildDir.jarFile("hat-example-" + example.fileName() + "-1.0.jar");
        out.println(exampleJarFile.fileName());
        jar(hatJarOptions, jar -> jar
                .jarFile(exampleJarFile)
                .maven_style_root(example)
                .javac(hatJavacOpts, javac -> javac
                    .class_path( hatJar, wrapJar, clWrapJar, glWrapJar, openclCapability.jarFile(buildDir), openglCapability.jarFile(buildDir),buildDir.jarFile("hat-backend-ffi-opencl-1.0.jar"))
                )
        );
    }

    if (cmakeCapability.available()) {
        if (!cmakeBuildDir.exists()) {
            cmake($ -> $
                    .verbose(verbose)
                    .source_dir(ffiBackends)
                    .build_dir(cmakeBuildDir)
                    .copy_to(buildDir)
            );
        }
        cmake($ -> $
                .build(cmakeBuildDir)
        );
    } else {
        out.println("No cmake available so we did not build ffi backend shared libs");
    }

}
 
