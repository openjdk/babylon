/* vim: set ft=java: 
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;

void main(String[] args) {
 var hatDir = Dir.current();
 var buildDir = BuildDir.of(hatDir.path("build")).create();
 var hatCoreDir = hatDir.existingDir("hat");
 var backends = hatDir.existingDir("backends");
 var examples = hatDir.existingDir("examples");

 var hatJar = buildDir.jarFile("hat-1.0.jar", $->$
   .javac($$->$$
     .add_modules("jdk.incubator.code")
     .source(24)
     .enable_preview()
     .add_exports("java.base", List.of("jdk.internal", "jdk.internal.vm.annotation"), "ALL-UNNAMED")
     .source_path(hatCoreDir.sourceDir("src/main/java"))
   )
 );

 record TypedDir(String type, Dir dir) {@Override public String toString(){return "hat-"+type()+"-" + dir().fileName() + "-1.0.jar";}}

 var stream =  Stream.concat(
     backends.subDirs().filter(dir-> dir.matches("^.*(opencl|ptx)$")).map(dir->new TypedDir("backend",dir)),
     examples.subDirs().filter( dir-> !dir.matches("^.*(experiments|target)$")).map(dir->new TypedDir("example",dir))
 );

 if (hatDir.dir("hattricks") instanceof Dir hattricks && hattricks.exists()) {
    stream = Stream.concat(stream,hattricks.subDirs().filter(dir -> dir.matches("^.*chess$")).map(dir -> new TypedDir("example", dir)));
 }

 stream.parallel().peek(IO::println).forEach(typeDir->
    buildDir.jarFile(
       typeDir.toString(), $->$
        .javac($$->$$
           .add_modules("jdk.incubator.code")
           .source(24)
           .enable_preview()
           .add_exports("java.base", List.of("jdk.internal", "jdk.internal.vm.annotation"), "ALL-UNNAMED")
           .class_path(hatJar)
           .source_path(typeDir.dir().sourceDir("src/main/java"))
        )
        .whenExists(typeDir.dir().dir("src/main/resources"), (dir, $$$)->$$$.dir_list(dir))
    )
 );


 var cmakeBuildDir = buildDir.cMakeBuildDir("cmake-build-debug");
 if (!cmakeBuildDir.exists()) {
   cmake($->$
     .source_dir(backends)
     .build_dir(cmakeBuildDir)
     .copy_to(buildDir)
   );
 }

 cmake($->$
   .build(cmakeBuildDir)
 );

}
