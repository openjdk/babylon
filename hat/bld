/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;           // all the helpers are here 
import static java.nio.file.Files.*; // so we can use isDirectory(path);

void main(String[] args) throws IOException, InterruptedException, URISyntaxException {
   var hatDir = new Root();
   List.of(args).forEach(arg->println(arg));

   withExpectedDirectory(hatDir.subDir("hat"), hatProjectDir -> {
      var hatJavacOpts = new JavacBuilder().opts(
         "--source", "24",
         "--enable-preview",
         "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
         "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
      );

      var hatJarResult = new Project(hatDir.buildDir(), hatProjectDir, "1.0").build(hatJavacOpts);

      var hatExampleJavacConfig = new JavacBuilder().basedOn(hatJavacOpts).class_path(hatJarResult.jar);

      withExpectedDirectory(hatDir.subDir("backends"), backendsDir -> {
         subDirStream(backendsDir, "opencl", "ptx", "cuda", "mock")
             .map(backendDir -> new Project(hatDir.buildDir(), backendDir, "1.0"))
             .parallel()
             .forEach(project -> project.build("hat-backend", hatExampleJavacConfig));

         var cmakeBuildDir = hatDir.buildDir().resolve("cmake-build-debug");

         if (!isDirectory(cmakeBuildDir)) { // We need to rerun build -B defaultCMakeBuilder.buildDir
            mkdir(cmakeBuildDir);
            cmake($ -> $ .S(backendsDir) .B(cmakeBuildDir) .opts("-DHAT_TARGET=" + hatDir.buildDir()));
         }

         cmake($->$ .build(cmakeBuildDir));
      });


      withExpectedDirectory(hatDir.subDir("examples"), examplesDir ->
         subDirStream(examplesDir, "blackscholes", "mandel", "squares", "heal", "violajones", "life")
             .map(exampleDir -> new Project(hatDir.buildDir(), exampleDir, "1.0"))
             .parallel()
             .forEach(project -> project.build("hat-example", hatExampleJavacConfig))
      );

      withOptionalDirectory(hatDir.subDir("hattricks"), hattricksDir -> {
         subDirStream(hattricksDir, "chess", "view")
             .map(hattrickDir -> new Project(hatDir.buildDir(), hattrickDir, "1.0"))
             .parallel()
             .forEach(project -> project.build("hat-example", hatExampleJavacConfig));


             withOptionalDirectory(hattricksDir.resolve("nbody-extracted-cl"),nbodyExtractedCl -> {
                var jextractedJava = mkdir(hatDir.buildDir().resolve("jextracted-java"));
                var extractedOpenCLCode = jextractedJava.resolve("opencl");
                if (!isDirectory(extractedOpenCLCode)) {
                   mkdir(extractedOpenCLCode);
                   println("Extracting OpenCL API");
                   jextract($$ -> $$
                      .home(hatDir.requireJExtract())
                      .cwd(nbodyExtractedCl)
                      .output(jextractedJava)
                      .target_package("opencl")
                      .when(os instanceof OS.Mac,  $$$ -> $$$
                         .compile_flag("-F" + ((OS.Mac)os).appLibFrameworks())
                         .library(((OS.Mac)os).frameworkLibrary("OpenCL"))
                         .header(((OS.Mac)os).frameworkHeader("OpenCL", "opencl.h"))
                      )
                   );
                }
                var extractedOpenGLCode = jextractedJava.resolve("opengl");
                if (!isDirectory(extractedOpenGLCode)) {
                   mkdir(extractedOpenGLCode);
                   println("Extracting OpenGL API");
                   jextract($$ -> $$
                      .home(hatDir.requireJExtract())
                      .cwd(nbodyExtractedCl)
                      .output(jextractedJava)
                      .target_package("opengl")
                      .when(os instanceof OS.Mac, $$$ -> $$$
                          .compile_flag("-F" + ((OS.Mac)os).libFrameworks())
                          .library(
                              ((OS.Mac)os).frameworkLibrary("GLUT"),
                              ((OS.Mac)os).frameworkLibrary("OpenGL")
                              )
                          .header(((OS.Mac)os).frameworkHeader("GLUT","glut.h"))
                      )
                      .when(os instanceof OS.Linux, $$$ -> {
                      })
                   );
                }

                println("Building nbody-extracted-cl");
                var nbodyJar =jar($ -> $
                   .jar(hatDir.buildDir().resolve("hat-example-nbody-extracted-cl-1.0.jar"))
                   .path_list(nbodyExtractedCl.resolve("src/main/resources"))
                   .javac($$ -> $$.basedOn(hatExampleJavacConfig)
                       .source_path(nbodyExtractedCl.resolve("src/main/java"), extractedOpenCLCode, extractedOpenGLCode)
                   )
                );

                /*java($ -> $
                   .vmopts(
                       "--enable-preview",
                       "--enable-native-access=ALL-UNNAMED",
                       "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
                       "-XstartOnFirstThread"
                    )
                    .class_path(nbodyJar.jar)
                    .main_class("nbody.Main")
                ); */
             });
          });
      });
}
