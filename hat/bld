/* vim: set ft=java:
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;

void main(String[] args) {

    /*
     *  ./
     *    +--build/                     All jars, native libs and executables
     *    |    +--cmake-build-debug/    All intermediate cmake artifacts
     *    |
     *    +--stage/
     *    |    +--repo/                 All downloaded maven assets
     *    |    |
     *    |    +--jextract/             All jextracted files
     *    |    |    +--opencl
     *    |    |    +--opengl
     *    |    |    +--cuda
     *    |
     *    +--hat                        * Note maven style layout
     *    |    +--src/main/java
     *    |    |    +--hat/
     *    |    |
     *    |    +--src/main/test
     *    |         +--hat/
     *    |
     *    +--backends
     *    |    +--java
     *    |    |    +--mt                    (*)
     *    |    |    +--seq                   (*)
     *    |    +--jextracted
     *    |    |    +--opencl                (*)
     *    |    +--native
     *    |    |    +--opencl                (*)
     *    |    |    +--ptx                   (*)
     *    |    |    +--mock                  (*)
     *    |    |    +--spirv                 (*)
     *    |    |    +--cuda                  (*)
     *    |    |    +--hip                   (*)
     *    |
     *    +--examples
     *    |    +--mandel                (*)
     *    |    +--squares               (*)
     *    |    +--heal                  (*)
     *    |    +--life                  (*)
     *    |    +--violajones            (*)
     *
     */

    var hatDir = Dir.current();
    var hatCoreDir = hatDir.existingDir("hat");
    var backends = hatDir.existingDir("backends");
    var examples = hatDir.existingDir("examples");
    var stageDir = hatDir.buildDir("stage").create();
    var repoDir = stageDir.repoDir("repo").create();
    var jextractDir = stageDir.buildDir("jextract").create();
    var buildDir = BuildDir.of(hatDir.path("build")).create();
    var cmakeBuildDir = buildDir.cMakeBuildDir("cmake-build-debug");
    //var jextractExe = Jextract.of(fromPATH("jextract").orElseThrow(()-> new RuntimeException("Can't locate jextract")));
    var extractedOpenCLJar = buildDir.jarFile("jextracted-opencl.jar");
    var extractedOpenGLJar = buildDir.jarFile("jextracted-opengl.jar");
    var verbose = false;

    var opencl = Capabilities.OpenCL.of();
    var opengl = Capabilities.OpenGL.of();
    var cuda = Capabilities.CUDA.of();
    var hip = Capabilities.HIP.of();
    var jextract = Capabilities.JExtract.of();
    var cmake = Capabilities.CMake.of();

    Capabilities capabilities = Capabilities.of(opencl, opengl, cuda, hip, jextract, cmake);

    if (cmake.available()){
        cmake.probe(buildDir, capabilities);
    }
    capabilities.capabilities().forEach(fw->println((fw.available()?"we have ":"no ")+fw.name));

    if (opencl.available()) {
        if (extractedOpenCLJar.exists()) {
            println("We've already extracted and jarred" + extractedOpenCLJar.path());
        } else {
            var openclSource = jextractDir.sourceDir("opencl");
            if (!openclSource.exists()) {
                jextract(jextract.executable, $ -> {
                            $.output(jextractDir).target_package(openclSource.fileName());
                            switch (os) {
                                case OS.Mac mac -> $
                                        .compile_flag("-F" + mac.appLibFrameworks())
                                        .library(mac.frameworkLibrary("OpenCL"))
                                        .header(mac.frameworkHeader("OpenCL", "opencl.h"));
                                case OS.Linux linux -> {
                                }
                                default -> throw new RuntimeException("Unsupported OS: " + os);
                            }
                        }
                );

            } else{
                 println("We've already extracted " + extractedOpenCLJar.path());
            }
            jar(jar -> jar
               .jar(extractedOpenCLJar)
               .javac(javac -> javac.source(24).source_path(openclSource))
            );
        }
    } else {
        println("According to cmake probe this platform does not have OpenCL");
    }

    if (opengl.available()) {
        if (extractedOpenGLJar.exists()) {
            println("We've already extracted and jarred" + extractedOpenGLJar.path());
        } else {
            var openglSource = jextractDir.sourceDir("opengl");
            if (!openglSource.exists()) {
                jextract(jextract.executable,$ -> {
                            $.output(jextractDir).target_package(openglSource.fileName());
                            switch (os) {
                                case OS.Mac mac -> $
                                        .compile_flag("-F" + mac.appLibFrameworks())
                                        .library(mac.frameworkLibrary("GLUT"), mac.frameworkLibrary("OpenGL"))
                                        .header(mac.frameworkHeader("GLUT", "glut.h"));
                                case OS.Linux linux -> {
                                }
                                default -> throw new RuntimeException("Unsupported OS: " + os);
                            }
                        }
                );
            }else{
                println("We've already extracted " + extractedOpenGLJar.path());
            }
            jar(jar -> jar
               .jar(extractedOpenGLJar)
               .javac(javac -> javac.source(24).source_path(openglSource))
            );
        }
    } else {
        println("According to cmake probe this platform does not have OpenGL");
    }

    if (cuda.available()) {

    } else {
        println("According to cmake probe this platform does not have CUDA");
    }

    var hatJavacOpts = javacBuilder(
            javacBuilder -> javacBuilder
                    .enable_preview()
                    .add_modules("jdk.incubator.code")
                    .add_exports("java.base",
                            List.of(
                                    "jdk.internal",
                                    "jdk.internal.vm.annotation"
                            ),
                            "ALL-UNNAMED"
                    )
                    .source(24)
    );

    var hatJarOptions = jarBuilder(jarBuilder -> jarBuilder
            .verbose(verbose)
    );


    var hatJar = buildDir.jarFile("hat-1.0.jar");
    var hatJarResult = jar($ -> $
            .copy(hatJarOptions)
            .jar(hatJar)
            .maven_style_root(hatCoreDir)
            .javac(javac -> javac.copy(hatJavacOpts))
    );

    var nativeBackends = backends.existingDir("native");

    // Here we create all native backend jars.
    nativeBackends
       .subDirs(backend -> !backend.matches("^.*(spirv|hip|shared|target|.idea)$"))
       .forEach(backend -> {
           var jarFile = buildDir.jarFile("hat-backend-native-" + backend.fileName() + "-1.0.jar");
           println(jarFile.fileName());
           jar(jar -> jar
              .copy(hatJarOptions)
              .jar(jarFile)
              .maven_style_root(backend)
              .javac(javac -> javac.copy(hatJavacOpts).class_path(hatJar))
           );
       });

  // Here we create all java backend jars.
    var javaBackends = backends.existingDir("java");
    javaBackends
       .subDirs(backend -> !backend.matches("^.*(target|.idea)$"))
       .forEach(backend -> {
           var jarFile = buildDir.jarFile("hat-backend-java-" + backend.fileName() + "-1.0.jar");
           println(jarFile.fileName());
           jar(jar -> jar
              .copy(hatJarOptions)
              .jar(jarFile)
              .dir_list(backend.dir("src/main/resources"))
           );
       });

    var jextractedBackends = backends.existingDir("jextracted");

          
   // here we create the example jars
    examples
      .subDirs(example -> !example.matches("^.*(experiments|nbody|target|.idea)$"))
      .forEach(example -> {
          var jarFile = buildDir.jarFile("hat-example-" + example.fileName() + "-1.0.jar");
          println(jarFile.fileName());
          jar(jar -> jar.copy(hatJarOptions)
             .jar(jarFile)
             .maven_style_root(example)
             .javac(javac -> javac.copy(hatJavacOpts).class_path(hatJar))
          );
      });

   // here we create the example jars which need opengl and opencl 
    if (opencl.available() && opengl.available()) {
        var example = examples.dir("nbody");
        var jarFile = buildDir.jarFile("hat-example-" + example.fileName() + "-1.0.jar");
        println(jarFile.fileName());
        jar(jar -> jar
          .copy(hatJarOptions)
          .jar(jarFile)
          .maven_style_root(example)
          .javac(javac -> javac
             .copy(hatJavacOpts)
             .class_path(hatJar, extractedOpenCLJar, extractedOpenGLJar)
          )
        );
    }else{
       println("Skipping nbody example because we need opencl and opengl");
    }


    if (!cmakeBuildDir.exists()) {
        cmake($ -> $
                .source_dir(nativeBackends)
                .build_dir(cmakeBuildDir)
                .copy_to(buildDir)
        );
    }

    cmake($ -> $
            .build(cmakeBuildDir)
    );
}
