/* vim: set ft=java: 
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;

void main(String[] args) {

 var hatDir = Dir.current();
 var hatLibDir = assertExists(hatDir.dir("hat"));
 var backends = assertExists(hatDir.dir("backends"));
 var examples = assertExists(hatDir.dir("examples"));
 var buildDir =BuildDir.of(hatDir.path("build")).create();


 var hatJar = jar($->$
   .jar(buildDir.jarFile("hat-1.0.jar"))
   .javac($$->$$
      .opts(
         "--source", "24",
         "--enable-preview",
         "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
         "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
      )
      .class_dir(buildDir.classDir("hat-1.0.jar.classes"))
      .source_path(hatLibDir.dir("src/main/java"))
   )
 );

 backends.forEachSubDirectory("opencl", "ptx").forEach(backend -> 
   jar($->$
     .jar(buildDir.jarFile("hat-backend-" + backend.name() + "-1.0.jar"))
     .javac($$ -> $$
        .opts(
           "--source", "24",
           "--enable-preview",
           "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
           "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
        )
        .class_dir(buildDir.classDir("hat-backend-" + backend.name() + "-1.0.jar.classes"))
        .class_path(hatJar)
        .source_path(backend.dir("src/main/java"))
     )
     .dir_list(dir->dir.exists(),backend.dir("src/main/resources"))
   )
 );

 var cmakeBuildDir = buildDir.cMakeBuildDir("cmake-build-debug");

 if (!cmakeBuildDir.exists()) {
    cmake($ -> $.source_dir(backends).build_dir(cmakeBuildDir).copy_to(buildDir));
 }

 cmake($->$.build(cmakeBuildDir));

 examples.forEachSubDirectory("blackscholes", "mandel", "squares", "heal", "violajones", "life").forEach(example -> 
   jar($->$
     .jar(buildDir.jarFile("hat-example-" + example.name() + "-1.0.jar"))
     .javac($$->$$
        .opts(
           "--source", "24",
           "--enable-preview",
           "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
           "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
        )
        .class_dir(buildDir.classDir("hat-example-" + example.name() + "-1.0.jar.classes"))
        .class_path(hatJar)
        .source_path(example.dir("src/main/java"))
     )
     .dir_list(dir->dir.exists(),example.dir("src/main/resources"))
   )
 );
}
