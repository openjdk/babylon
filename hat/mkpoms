/* vim: set ft=java: 
 *
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import static bldr.Bldr.*;

void main(String[] argv) {
   var pomComment = """
      Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.

      This code is free software; you can redistribute it and/or modify it
      under the terms of the GNU General Public License version 2 only, as
      published by the Free Software Foundation.  Oracle designates this
      particular file as subject to the "Classpath" exception as provided
      by Oracle in the LICENSE file that accompanied this code.

      This code is distributed in the hope that it will be useful, but WITHOUT
      ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
      FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
      version 2 for more details (a copy is included in the LICENSE file that
            accompanied this code).

      You should have received a copy of the GNU General Public License version
      2 along with this work; if not, write to the Free Software Foundation,
        Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

           Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
           or visit www.oracle.com if you need additional information or have any
           questions.                
           """;

   var hatDir = Dir.current();
   var hatCoreDir = hatDir.existingDir("hat");
   var backends = hatDir.existingDir("backends");
   var examples = hatDir.existingDir("examples");


   hatDir.createPom(pomComment, pom -> pom
     .comment("Auto generated by mkpoms")
     .pom("oracle.code", "hat-root", "1.0")
     .properties(props -> props
        .property("project.build.sourceEncoding", "UTF-8")
        .property("hat.target", "${env.PWD}/build")
     )
     .modules("hat", "backends", "examples")
     .build(build -> build
        .plugins(plugins -> plugins
           .compilerPluginConfiguration(configuration -> configuration
              // These compiler args are inherited by backends and examples
              .compilerArgs(
                 "--add-modules=jdk.incubator.code",
                 "--enable-preview",
                 "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
                 "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
              )
              .source("24").target("24").showDeprecation("true").failOnError("true").showWarnings("true")
           )
        )
     )
   );

   // Now hat/pom.xml
   hatCoreDir.createPom(pomComment, pom -> pom
     .comment("Auto generated by mkpoms")
     .jar("oracle.code", "hat", "1.0")
     .parent("oracle.code", "hat-root", "1.0")
     .dependencies(dependencies -> dependencies
        .dependency("org.junit.jupiter", "junit-jupiter-engine", "5.10.0", "test")
     )
     .build(build -> build
        .pluginManagement(pluginManagement -> pluginManagement
           .plugins(plugins -> plugins
              // This is for the test cases (testng)
              .plugin("org.apache.maven.plugins", "maven-surefire-plugin", "3.1.2", plugin -> plugin
                 .configuration(configuration -> configuration
                    .argLine("-enable-preview")
                 )
              )
           )
        )
        .plugins(plugins -> plugins
           .antPluginExecutions(executions -> executions
              // We copy the jar to the build dir here
              .ant("1","install", "run", ant -> ant
                 .copy("target/${project.artifactId}-1.0.jar", "${hat.target}")
              )
           )
        )
     )
  );

   // Here we create examples/pom.xml and nested inside we create each example/*/pom.xml
   examples.createPom(pomComment, examplesPom -> examplesPom
     .comment("Auto generated by mkpoms")
     .pom("oracle.code", "hat-examples", "1.0")
     .parent("oracle.code", "hat-root", "1.0")
     .dependsOn("oracle.code", "hat", "1.0")
     .modules(modules -> examples.subDirs().filter(dir -> !dir.matches("^.*(experiments|target|.idea)$")).forEach(example -> {
        modules.module(example.fileName());
        // here is the 'nested example/*/pom.xml
        example.createPom(pomComment, examplePom -> examplePom
           .comment("Auto generated by mkpoms")
           .jar("oracle.code", "hat-example-" + example.fileName(), "1.0")
           .parent("oracle.code", "hat-examples", "1.0")
           .dependsOn("oracle.code", "hat", "1.0")
           .build(build -> build
              .plugins(plugins -> plugins
                 .antPluginExecutions(executions -> executions
                    // We copy the example jar to the build dir here
                    .ant("1","install", "run", ant -> ant
                       .copy("target/hat-example-" + example.fileName() + "-1.0.jar", "${hat.target}")
                    )
                 )
              )
           )
        );
     }))
   );

   // Now backends/pom.xml and backends/*/pom.xml
   backends.createPom(pomComment, backendsPom -> backendsPom
     .comment("Auto generated by mkpoms")
     .pom("oracle.code", "hat-backends", "1.0")
     .parent("oracle.code", "hat-root", "1.0")
     .dependsOn("oracle.code", "hat", "1.0")
     .modules(modules -> backends.subDirs().filter(dir -> !dir.matches("^.*(spirv|hip|shared|openclx|target|.idea)$")).forEach(backend -> {
        modules.module(backend.fileName());

        // here is the 'nested backends/*/pom.xml
        backend.createPom(pomComment, backendPom ->{backendPom
           .comment("Auto generated by mkpoms")
           .jar("oracle.code", "hat-backend-" + backend.fileName(), "1.0")
           .parent("oracle.code", "hat-backends", "1.0")
           .dependsOn("oracle.code", "hat", "1.0")
           .build(build -> build
              .plugins(plugins -> {plugins
                 .execPlugin(plugin -> plugin.configuration(conf -> conf.skip("true")))
                 .antPluginExecutions(executions -> executions
                    .ant("1", "install", "run", ant -> ant
                       .copy("target/hat-backend-" + backend.fileName() + "-1.0.jar", "${hat.target}")
                    )
//                    .ant("2", "generate-sources", "run", ant -> ant
//                       .echo("in generate sources phase")
//                    )
                 );
              })
           );
        });
     }))
     .build(build -> build
        .plugins(plugins -> plugins
           .execPluginExecutions(e -> e
              .cmake("1","compile", "-DHAT_TARGET=${hat.target}", "-B", "${hat.target}/cmake-build-debug")
              .cmake("2" ,"install", "--build","${hat.target}/cmake-build-debug")
           )
        )
     )
  );
}

